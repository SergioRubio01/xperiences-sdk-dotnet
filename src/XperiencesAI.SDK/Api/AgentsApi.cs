// <auto-generated>
/*
 * Xperiences API
 *
 * API for VR mentoring experiences
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@xperiences.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using XperiencesAI.SDK.Client;
using XperiencesAI.SDK.Model;
using System.Diagnostics.CodeAnalysis;

namespace XperiencesAI.SDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IAgentsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        AgentsApiEvents Events { get; }

        /// <summary>
        /// Create Agent
        /// </summary>
        /// <remarks>
        /// Create a new agent.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateAgentApiV1AgentsPostApiResponse"/>&gt;</returns>
        Task<ICreateAgentApiV1AgentsPostApiResponse> CreateAgentApiV1AgentsPostAsync(AgentCreate agentCreate, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Agent
        /// </summary>
        /// <remarks>
        /// Create a new agent.
        /// </remarks>
        /// <param name="agentCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateAgentApiV1AgentsPostApiResponse"/>?&gt;</returns>
        Task<ICreateAgentApiV1AgentsPostApiResponse?> CreateAgentApiV1AgentsPostOrDefaultAsync(AgentCreate agentCreate, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Conversation
        /// </summary>
        /// <remarks>
        /// Create a new conversation for an agent.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId"></param>
        /// <param name="conversationCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateConversationApiV1AgentsAgentIdConversationsPostApiResponse"/>&gt;</returns>
        Task<ICreateConversationApiV1AgentsAgentIdConversationsPostApiResponse> CreateConversationApiV1AgentsAgentIdConversationsPostAsync(string agentId, ConversationCreate conversationCreate, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Conversation
        /// </summary>
        /// <remarks>
        /// Create a new conversation for an agent.
        /// </remarks>
        /// <param name="agentId"></param>
        /// <param name="conversationCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateConversationApiV1AgentsAgentIdConversationsPostApiResponse"/>?&gt;</returns>
        Task<ICreateConversationApiV1AgentsAgentIdConversationsPostApiResponse?> CreateConversationApiV1AgentsAgentIdConversationsPostOrDefaultAsync(string agentId, ConversationCreate conversationCreate, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Agent
        /// </summary>
        /// <remarks>
        /// Delete an agent.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAgentApiV1AgentsAgentIdDeleteApiResponse"/>&gt;</returns>
        Task<IDeleteAgentApiV1AgentsAgentIdDeleteApiResponse> DeleteAgentApiV1AgentsAgentIdDeleteAsync(string agentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Agent
        /// </summary>
        /// <remarks>
        /// Delete an agent.
        /// </remarks>
        /// <param name="agentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAgentApiV1AgentsAgentIdDeleteApiResponse"/>?&gt;</returns>
        Task<IDeleteAgentApiV1AgentsAgentIdDeleteApiResponse?> DeleteAgentApiV1AgentsAgentIdDeleteOrDefaultAsync(string agentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Agent
        /// </summary>
        /// <remarks>
        /// Get an agent by ID.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAgentApiV1AgentsAgentIdGetApiResponse"/>&gt;</returns>
        Task<IGetAgentApiV1AgentsAgentIdGetApiResponse> GetAgentApiV1AgentsAgentIdGetAsync(string agentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Agent
        /// </summary>
        /// <remarks>
        /// Get an agent by ID.
        /// </remarks>
        /// <param name="agentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAgentApiV1AgentsAgentIdGetApiResponse"/>?&gt;</returns>
        Task<IGetAgentApiV1AgentsAgentIdGetApiResponse?> GetAgentApiV1AgentsAgentIdGetOrDefaultAsync(string agentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Conversation
        /// </summary>
        /// <remarks>
        /// Get conversation details by ID.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId"></param>
        /// <param name="conversationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConversationApiV1AgentsAgentIdConversationsConversationIdGetApiResponse"/>&gt;</returns>
        Task<IGetConversationApiV1AgentsAgentIdConversationsConversationIdGetApiResponse> GetConversationApiV1AgentsAgentIdConversationsConversationIdGetAsync(string agentId, string conversationId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Conversation
        /// </summary>
        /// <remarks>
        /// Get conversation details by ID.
        /// </remarks>
        /// <param name="agentId"></param>
        /// <param name="conversationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConversationApiV1AgentsAgentIdConversationsConversationIdGetApiResponse"/>?&gt;</returns>
        Task<IGetConversationApiV1AgentsAgentIdConversationsConversationIdGetApiResponse?> GetConversationApiV1AgentsAgentIdConversationsConversationIdGetOrDefaultAsync(string agentId, string conversationId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Agents
        /// </summary>
        /// <remarks>
        /// List all available agents.  Args:     agent_service: Injected AgentService instance     auth: Authentication dependency     skip: Number of agents to skip     limit: Maximum number of agents to return  Returns:     List of agents
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Number of agents to skip (optional, default to 0)</param>
        /// <param name="limit">Max number of agents (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListAgentsApiV1AgentsGetApiResponse"/>&gt;</returns>
        Task<IListAgentsApiV1AgentsGetApiResponse> ListAgentsApiV1AgentsGetAsync(Option<int> skip = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Agents
        /// </summary>
        /// <remarks>
        /// List all available agents.  Args:     agent_service: Injected AgentService instance     auth: Authentication dependency     skip: Number of agents to skip     limit: Maximum number of agents to return  Returns:     List of agents
        /// </remarks>
        /// <param name="skip">Number of agents to skip (optional, default to 0)</param>
        /// <param name="limit">Max number of agents (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListAgentsApiV1AgentsGetApiResponse"/>?&gt;</returns>
        Task<IListAgentsApiV1AgentsGetApiResponse?> ListAgentsApiV1AgentsGetOrDefaultAsync(Option<int> skip = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Conversations
        /// </summary>
        /// <remarks>
        /// List all conversations for an agent.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId"></param>
        /// <param name="skip">Number of conversations to skip (optional, default to 0)</param>
        /// <param name="limit">Max conversations (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListConversationsApiV1AgentsAgentIdConversationsGetApiResponse"/>&gt;</returns>
        Task<IListConversationsApiV1AgentsAgentIdConversationsGetApiResponse> ListConversationsApiV1AgentsAgentIdConversationsGetAsync(string agentId, Option<int> skip = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Conversations
        /// </summary>
        /// <remarks>
        /// List all conversations for an agent.
        /// </remarks>
        /// <param name="agentId"></param>
        /// <param name="skip">Number of conversations to skip (optional, default to 0)</param>
        /// <param name="limit">Max conversations (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListConversationsApiV1AgentsAgentIdConversationsGetApiResponse"/>?&gt;</returns>
        Task<IListConversationsApiV1AgentsAgentIdConversationsGetApiResponse?> ListConversationsApiV1AgentsAgentIdConversationsGetOrDefaultAsync(string agentId, Option<int> skip = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Messages
        /// </summary>
        /// <remarks>
        /// List all messages for a conversation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId"></param>
        /// <param name="conversationId"></param>
        /// <param name="skip">Number of messages to skip (optional, default to 0)</param>
        /// <param name="limit">Max messages to return (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGetApiResponse"/>&gt;</returns>
        Task<IListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGetApiResponse> ListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGetAsync(string agentId, string conversationId, Option<int> skip = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Messages
        /// </summary>
        /// <remarks>
        /// List all messages for a conversation.
        /// </remarks>
        /// <param name="agentId"></param>
        /// <param name="conversationId"></param>
        /// <param name="skip">Number of messages to skip (optional, default to 0)</param>
        /// <param name="limit">Max messages to return (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGetApiResponse"/>?&gt;</returns>
        Task<IListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGetApiResponse?> ListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGetOrDefaultAsync(string agentId, string conversationId, Option<int> skip = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Process Speech
        /// </summary>
        /// <remarks>
        /// Process speech input and return response.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId"></param>
        /// <param name="audioFile"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProcessSpeechApiV1AgentsAgentIdSpeechPostApiResponse"/>&gt;</returns>
        Task<IProcessSpeechApiV1AgentsAgentIdSpeechPostApiResponse> ProcessSpeechApiV1AgentsAgentIdSpeechPostAsync(string agentId, System.IO.Stream audioFile, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Process Speech
        /// </summary>
        /// <remarks>
        /// Process speech input and return response.
        /// </remarks>
        /// <param name="agentId"></param>
        /// <param name="audioFile"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProcessSpeechApiV1AgentsAgentIdSpeechPostApiResponse"/>?&gt;</returns>
        Task<IProcessSpeechApiV1AgentsAgentIdSpeechPostApiResponse?> ProcessSpeechApiV1AgentsAgentIdSpeechPostOrDefaultAsync(string agentId, System.IO.Stream audioFile, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Process Text
        /// </summary>
        /// <remarks>
        /// Process text input for an agent.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId"></param>
        /// <param name="textRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProcessTextApiV1AgentsAgentIdTextPostApiResponse"/>&gt;</returns>
        Task<IProcessTextApiV1AgentsAgentIdTextPostApiResponse> ProcessTextApiV1AgentsAgentIdTextPostAsync(string agentId, TextRequest textRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Process Text
        /// </summary>
        /// <remarks>
        /// Process text input for an agent.
        /// </remarks>
        /// <param name="agentId"></param>
        /// <param name="textRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProcessTextApiV1AgentsAgentIdTextPostApiResponse"/>?&gt;</returns>
        Task<IProcessTextApiV1AgentsAgentIdTextPostApiResponse?> ProcessTextApiV1AgentsAgentIdTextPostOrDefaultAsync(string agentId, TextRequest textRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Agent
        /// </summary>
        /// <remarks>
        /// Update an agent.  Args:     agent_id: Agent ID     agent_update: Agent update data     agent_service: Injected AgentService instance     agent: Current agent model from dependency     auth: Authentication dependency  Returns:     Updated agent
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId"></param>
        /// <param name="agentUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateAgentApiV1AgentsAgentIdPutApiResponse"/>&gt;</returns>
        Task<IUpdateAgentApiV1AgentsAgentIdPutApiResponse> UpdateAgentApiV1AgentsAgentIdPutAsync(string agentId, AgentUpdate agentUpdate, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Agent
        /// </summary>
        /// <remarks>
        /// Update an agent.  Args:     agent_id: Agent ID     agent_update: Agent update data     agent_service: Injected AgentService instance     agent: Current agent model from dependency     auth: Authentication dependency  Returns:     Updated agent
        /// </remarks>
        /// <param name="agentId"></param>
        /// <param name="agentUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateAgentApiV1AgentsAgentIdPutApiResponse"/>?&gt;</returns>
        Task<IUpdateAgentApiV1AgentsAgentIdPutApiResponse?> UpdateAgentApiV1AgentsAgentIdPutOrDefaultAsync(string agentId, AgentUpdate agentUpdate, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateAgentApiV1AgentsPostApiResponse"/>
    /// </summary>
    public interface ICreateAgentApiV1AgentsPostApiResponse : XperiencesAI.SDK.Client.IApiResponse, ICreated<XperiencesAI.SDK.Model.AgentResponse?>, IUnprocessableContent<XperiencesAI.SDK.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="ICreateConversationApiV1AgentsAgentIdConversationsPostApiResponse"/>
    /// </summary>
    public interface ICreateConversationApiV1AgentsAgentIdConversationsPostApiResponse : XperiencesAI.SDK.Client.IApiResponse, ICreated<XperiencesAI.SDK.Model.Conversation?>, IUnprocessableContent<XperiencesAI.SDK.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteAgentApiV1AgentsAgentIdDeleteApiResponse"/>
    /// </summary>
    public interface IDeleteAgentApiV1AgentsAgentIdDeleteApiResponse : XperiencesAI.SDK.Client.IApiResponse, IUnprocessableContent<XperiencesAI.SDK.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetAgentApiV1AgentsAgentIdGetApiResponse"/>
    /// </summary>
    public interface IGetAgentApiV1AgentsAgentIdGetApiResponse : XperiencesAI.SDK.Client.IApiResponse, IOk<XperiencesAI.SDK.Model.AgentResponse?>, IUnprocessableContent<XperiencesAI.SDK.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetConversationApiV1AgentsAgentIdConversationsConversationIdGetApiResponse"/>
    /// </summary>
    public interface IGetConversationApiV1AgentsAgentIdConversationsConversationIdGetApiResponse : XperiencesAI.SDK.Client.IApiResponse, IOk<XperiencesAI.SDK.Model.Conversation?>, IUnprocessableContent<XperiencesAI.SDK.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IListAgentsApiV1AgentsGetApiResponse"/>
    /// </summary>
    public interface IListAgentsApiV1AgentsGetApiResponse : XperiencesAI.SDK.Client.IApiResponse, IOk<List<Agent>?>, IUnprocessableContent<XperiencesAI.SDK.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IListConversationsApiV1AgentsAgentIdConversationsGetApiResponse"/>
    /// </summary>
    public interface IListConversationsApiV1AgentsAgentIdConversationsGetApiResponse : XperiencesAI.SDK.Client.IApiResponse, IOk<List<Conversation>?>, IUnprocessableContent<XperiencesAI.SDK.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGetApiResponse"/>
    /// </summary>
    public interface IListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGetApiResponse : XperiencesAI.SDK.Client.IApiResponse, IOk<List<Message>?>, IUnprocessableContent<XperiencesAI.SDK.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IProcessSpeechApiV1AgentsAgentIdSpeechPostApiResponse"/>
    /// </summary>
    public interface IProcessSpeechApiV1AgentsAgentIdSpeechPostApiResponse : XperiencesAI.SDK.Client.IApiResponse, IOk<XperiencesAI.SDK.Model.MessageResponse?>, IUnprocessableContent<XperiencesAI.SDK.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IProcessTextApiV1AgentsAgentIdTextPostApiResponse"/>
    /// </summary>
    public interface IProcessTextApiV1AgentsAgentIdTextPostApiResponse : XperiencesAI.SDK.Client.IApiResponse, IOk<XperiencesAI.SDK.Model.TextResponse?>, IUnprocessableContent<XperiencesAI.SDK.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateAgentApiV1AgentsAgentIdPutApiResponse"/>
    /// </summary>
    public interface IUpdateAgentApiV1AgentsAgentIdPutApiResponse : XperiencesAI.SDK.Client.IApiResponse, IOk<XperiencesAI.SDK.Model.Agent?>, IUnprocessableContent<XperiencesAI.SDK.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AgentsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateAgentApiV1AgentsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateAgentApiV1AgentsPost;

        internal void ExecuteOnCreateAgentApiV1AgentsPost(AgentsApi.CreateAgentApiV1AgentsPostApiResponse apiResponse)
        {
            OnCreateAgentApiV1AgentsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateAgentApiV1AgentsPost(Exception exception)
        {
            OnErrorCreateAgentApiV1AgentsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateConversationApiV1AgentsAgentIdConversationsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateConversationApiV1AgentsAgentIdConversationsPost;

        internal void ExecuteOnCreateConversationApiV1AgentsAgentIdConversationsPost(AgentsApi.CreateConversationApiV1AgentsAgentIdConversationsPostApiResponse apiResponse)
        {
            OnCreateConversationApiV1AgentsAgentIdConversationsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateConversationApiV1AgentsAgentIdConversationsPost(Exception exception)
        {
            OnErrorCreateConversationApiV1AgentsAgentIdConversationsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteAgentApiV1AgentsAgentIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteAgentApiV1AgentsAgentIdDelete;

        internal void ExecuteOnDeleteAgentApiV1AgentsAgentIdDelete(AgentsApi.DeleteAgentApiV1AgentsAgentIdDeleteApiResponse apiResponse)
        {
            OnDeleteAgentApiV1AgentsAgentIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteAgentApiV1AgentsAgentIdDelete(Exception exception)
        {
            OnErrorDeleteAgentApiV1AgentsAgentIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAgentApiV1AgentsAgentIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAgentApiV1AgentsAgentIdGet;

        internal void ExecuteOnGetAgentApiV1AgentsAgentIdGet(AgentsApi.GetAgentApiV1AgentsAgentIdGetApiResponse apiResponse)
        {
            OnGetAgentApiV1AgentsAgentIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAgentApiV1AgentsAgentIdGet(Exception exception)
        {
            OnErrorGetAgentApiV1AgentsAgentIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetConversationApiV1AgentsAgentIdConversationsConversationIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetConversationApiV1AgentsAgentIdConversationsConversationIdGet;

        internal void ExecuteOnGetConversationApiV1AgentsAgentIdConversationsConversationIdGet(AgentsApi.GetConversationApiV1AgentsAgentIdConversationsConversationIdGetApiResponse apiResponse)
        {
            OnGetConversationApiV1AgentsAgentIdConversationsConversationIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetConversationApiV1AgentsAgentIdConversationsConversationIdGet(Exception exception)
        {
            OnErrorGetConversationApiV1AgentsAgentIdConversationsConversationIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListAgentsApiV1AgentsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListAgentsApiV1AgentsGet;

        internal void ExecuteOnListAgentsApiV1AgentsGet(AgentsApi.ListAgentsApiV1AgentsGetApiResponse apiResponse)
        {
            OnListAgentsApiV1AgentsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListAgentsApiV1AgentsGet(Exception exception)
        {
            OnErrorListAgentsApiV1AgentsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListConversationsApiV1AgentsAgentIdConversationsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListConversationsApiV1AgentsAgentIdConversationsGet;

        internal void ExecuteOnListConversationsApiV1AgentsAgentIdConversationsGet(AgentsApi.ListConversationsApiV1AgentsAgentIdConversationsGetApiResponse apiResponse)
        {
            OnListConversationsApiV1AgentsAgentIdConversationsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListConversationsApiV1AgentsAgentIdConversationsGet(Exception exception)
        {
            OnErrorListConversationsApiV1AgentsAgentIdConversationsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGet;

        internal void ExecuteOnListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGet(AgentsApi.ListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGetApiResponse apiResponse)
        {
            OnListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGet(Exception exception)
        {
            OnErrorListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnProcessSpeechApiV1AgentsAgentIdSpeechPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorProcessSpeechApiV1AgentsAgentIdSpeechPost;

        internal void ExecuteOnProcessSpeechApiV1AgentsAgentIdSpeechPost(AgentsApi.ProcessSpeechApiV1AgentsAgentIdSpeechPostApiResponse apiResponse)
        {
            OnProcessSpeechApiV1AgentsAgentIdSpeechPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorProcessSpeechApiV1AgentsAgentIdSpeechPost(Exception exception)
        {
            OnErrorProcessSpeechApiV1AgentsAgentIdSpeechPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnProcessTextApiV1AgentsAgentIdTextPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorProcessTextApiV1AgentsAgentIdTextPost;

        internal void ExecuteOnProcessTextApiV1AgentsAgentIdTextPost(AgentsApi.ProcessTextApiV1AgentsAgentIdTextPostApiResponse apiResponse)
        {
            OnProcessTextApiV1AgentsAgentIdTextPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorProcessTextApiV1AgentsAgentIdTextPost(Exception exception)
        {
            OnErrorProcessTextApiV1AgentsAgentIdTextPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateAgentApiV1AgentsAgentIdPut;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateAgentApiV1AgentsAgentIdPut;

        internal void ExecuteOnUpdateAgentApiV1AgentsAgentIdPut(AgentsApi.UpdateAgentApiV1AgentsAgentIdPutApiResponse apiResponse)
        {
            OnUpdateAgentApiV1AgentsAgentIdPut?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateAgentApiV1AgentsAgentIdPut(Exception exception)
        {
            OnErrorUpdateAgentApiV1AgentsAgentIdPut?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class AgentsApi : IAgentsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<AgentsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public AgentsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="AgentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AgentsApi(ILogger<AgentsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, AgentsApiEvents agentsApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<AgentsApi>();
            HttpClient = httpClient;
            Events = agentsApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatCreateAgentApiV1AgentsPost(AgentCreate agentCreate);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="agentCreate"></param>
        /// <returns></returns>
        private void ValidateCreateAgentApiV1AgentsPost(AgentCreate agentCreate)
        {
            if (agentCreate == null)
                throw new ArgumentNullException(nameof(agentCreate));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="agentCreate"></param>
        private void AfterCreateAgentApiV1AgentsPostDefaultImplementation(ICreateAgentApiV1AgentsPostApiResponse apiResponseLocalVar, AgentCreate agentCreate)
        {
            bool suppressDefaultLog = false;
            AfterCreateAgentApiV1AgentsPost(ref suppressDefaultLog, apiResponseLocalVar, agentCreate);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="agentCreate"></param>
        partial void AfterCreateAgentApiV1AgentsPost(ref bool suppressDefaultLog, ICreateAgentApiV1AgentsPostApiResponse apiResponseLocalVar, AgentCreate agentCreate);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="agentCreate"></param>
        private void OnErrorCreateAgentApiV1AgentsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AgentCreate agentCreate)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateAgentApiV1AgentsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, agentCreate);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="agentCreate"></param>
        partial void OnErrorCreateAgentApiV1AgentsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AgentCreate agentCreate);

        /// <summary>
        /// Create Agent Create a new agent.
        /// </summary>
        /// <param name="agentCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateAgentApiV1AgentsPostApiResponse"/>&gt;</returns>
        public async Task<ICreateAgentApiV1AgentsPostApiResponse?> CreateAgentApiV1AgentsPostOrDefaultAsync(AgentCreate agentCreate, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateAgentApiV1AgentsPostAsync(agentCreate, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create Agent Create a new agent.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateAgentApiV1AgentsPostApiResponse"/>&gt;</returns>
        public async Task<ICreateAgentApiV1AgentsPostApiResponse> CreateAgentApiV1AgentsPostAsync(AgentCreate agentCreate, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateAgentApiV1AgentsPost(agentCreate);

                FormatCreateAgentApiV1AgentsPost(agentCreate);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/agents/");

                    httpRequestMessageLocalVar.Content = (agentCreate as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(agentCreate, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateAgentApiV1AgentsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateAgentApiV1AgentsPostApiResponse>();

                        CreateAgentApiV1AgentsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/agents/", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateAgentApiV1AgentsPostDefaultImplementation(apiResponseLocalVar, agentCreate);

                        Events.ExecuteOnCreateAgentApiV1AgentsPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateAgentApiV1AgentsPostDefaultImplementation(e, "/api/v1/agents/", uriBuilderLocalVar.Path, agentCreate);
                Events.ExecuteOnErrorCreateAgentApiV1AgentsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateAgentApiV1AgentsPostApiResponse"/>
        /// </summary>
        public partial class CreateAgentApiV1AgentsPostApiResponse : XperiencesAI.SDK.Client.ApiResponse, ICreateAgentApiV1AgentsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateAgentApiV1AgentsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateAgentApiV1AgentsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateAgentApiV1AgentsPostApiResponse(ILogger<CreateAgentApiV1AgentsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public XperiencesAI.SDK.Model.AgentResponse? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<XperiencesAI.SDK.Model.AgentResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out XperiencesAI.SDK.Model.AgentResponse? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public XperiencesAI.SDK.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<XperiencesAI.SDK.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out XperiencesAI.SDK.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateConversationApiV1AgentsAgentIdConversationsPost(ref string agentId, ConversationCreate conversationCreate);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="agentId"></param>
        /// <param name="conversationCreate"></param>
        /// <returns></returns>
        private void ValidateCreateConversationApiV1AgentsAgentIdConversationsPost(string agentId, ConversationCreate conversationCreate)
        {
            if (agentId == null)
                throw new ArgumentNullException(nameof(agentId));

            if (conversationCreate == null)
                throw new ArgumentNullException(nameof(conversationCreate));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="agentId"></param>
        /// <param name="conversationCreate"></param>
        private void AfterCreateConversationApiV1AgentsAgentIdConversationsPostDefaultImplementation(ICreateConversationApiV1AgentsAgentIdConversationsPostApiResponse apiResponseLocalVar, string agentId, ConversationCreate conversationCreate)
        {
            bool suppressDefaultLog = false;
            AfterCreateConversationApiV1AgentsAgentIdConversationsPost(ref suppressDefaultLog, apiResponseLocalVar, agentId, conversationCreate);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="agentId"></param>
        /// <param name="conversationCreate"></param>
        partial void AfterCreateConversationApiV1AgentsAgentIdConversationsPost(ref bool suppressDefaultLog, ICreateConversationApiV1AgentsAgentIdConversationsPostApiResponse apiResponseLocalVar, string agentId, ConversationCreate conversationCreate);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="agentId"></param>
        /// <param name="conversationCreate"></param>
        private void OnErrorCreateConversationApiV1AgentsAgentIdConversationsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string agentId, ConversationCreate conversationCreate)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateConversationApiV1AgentsAgentIdConversationsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, agentId, conversationCreate);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="agentId"></param>
        /// <param name="conversationCreate"></param>
        partial void OnErrorCreateConversationApiV1AgentsAgentIdConversationsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string agentId, ConversationCreate conversationCreate);

        /// <summary>
        /// Create Conversation Create a new conversation for an agent.
        /// </summary>
        /// <param name="agentId"></param>
        /// <param name="conversationCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateConversationApiV1AgentsAgentIdConversationsPostApiResponse"/>&gt;</returns>
        public async Task<ICreateConversationApiV1AgentsAgentIdConversationsPostApiResponse?> CreateConversationApiV1AgentsAgentIdConversationsPostOrDefaultAsync(string agentId, ConversationCreate conversationCreate, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateConversationApiV1AgentsAgentIdConversationsPostAsync(agentId, conversationCreate, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create Conversation Create a new conversation for an agent.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId"></param>
        /// <param name="conversationCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateConversationApiV1AgentsAgentIdConversationsPostApiResponse"/>&gt;</returns>
        public async Task<ICreateConversationApiV1AgentsAgentIdConversationsPostApiResponse> CreateConversationApiV1AgentsAgentIdConversationsPostAsync(string agentId, ConversationCreate conversationCreate, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateConversationApiV1AgentsAgentIdConversationsPost(agentId, conversationCreate);

                FormatCreateConversationApiV1AgentsAgentIdConversationsPost(ref agentId, conversationCreate);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/agents/{agent_id}/conversations");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bagent_id%7D", Uri.EscapeDataString(agentId.ToString()));

                    httpRequestMessageLocalVar.Content = (conversationCreate as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(conversationCreate, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateConversationApiV1AgentsAgentIdConversationsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateConversationApiV1AgentsAgentIdConversationsPostApiResponse>();

                        CreateConversationApiV1AgentsAgentIdConversationsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/agents/{agent_id}/conversations", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateConversationApiV1AgentsAgentIdConversationsPostDefaultImplementation(apiResponseLocalVar, agentId, conversationCreate);

                        Events.ExecuteOnCreateConversationApiV1AgentsAgentIdConversationsPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateConversationApiV1AgentsAgentIdConversationsPostDefaultImplementation(e, "/api/v1/agents/{agent_id}/conversations", uriBuilderLocalVar.Path, agentId, conversationCreate);
                Events.ExecuteOnErrorCreateConversationApiV1AgentsAgentIdConversationsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateConversationApiV1AgentsAgentIdConversationsPostApiResponse"/>
        /// </summary>
        public partial class CreateConversationApiV1AgentsAgentIdConversationsPostApiResponse : XperiencesAI.SDK.Client.ApiResponse, ICreateConversationApiV1AgentsAgentIdConversationsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateConversationApiV1AgentsAgentIdConversationsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateConversationApiV1AgentsAgentIdConversationsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateConversationApiV1AgentsAgentIdConversationsPostApiResponse(ILogger<CreateConversationApiV1AgentsAgentIdConversationsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public XperiencesAI.SDK.Model.Conversation? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<XperiencesAI.SDK.Model.Conversation>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out XperiencesAI.SDK.Model.Conversation? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public XperiencesAI.SDK.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<XperiencesAI.SDK.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out XperiencesAI.SDK.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteAgentApiV1AgentsAgentIdDelete(ref string agentId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="agentId"></param>
        /// <returns></returns>
        private void ValidateDeleteAgentApiV1AgentsAgentIdDelete(string agentId)
        {
            if (agentId == null)
                throw new ArgumentNullException(nameof(agentId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="agentId"></param>
        private void AfterDeleteAgentApiV1AgentsAgentIdDeleteDefaultImplementation(IDeleteAgentApiV1AgentsAgentIdDeleteApiResponse apiResponseLocalVar, string agentId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteAgentApiV1AgentsAgentIdDelete(ref suppressDefaultLog, apiResponseLocalVar, agentId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="agentId"></param>
        partial void AfterDeleteAgentApiV1AgentsAgentIdDelete(ref bool suppressDefaultLog, IDeleteAgentApiV1AgentsAgentIdDeleteApiResponse apiResponseLocalVar, string agentId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="agentId"></param>
        private void OnErrorDeleteAgentApiV1AgentsAgentIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string agentId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteAgentApiV1AgentsAgentIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, agentId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="agentId"></param>
        partial void OnErrorDeleteAgentApiV1AgentsAgentIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string agentId);

        /// <summary>
        /// Delete Agent Delete an agent.
        /// </summary>
        /// <param name="agentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAgentApiV1AgentsAgentIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteAgentApiV1AgentsAgentIdDeleteApiResponse?> DeleteAgentApiV1AgentsAgentIdDeleteOrDefaultAsync(string agentId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteAgentApiV1AgentsAgentIdDeleteAsync(agentId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Agent Delete an agent.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAgentApiV1AgentsAgentIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteAgentApiV1AgentsAgentIdDeleteApiResponse> DeleteAgentApiV1AgentsAgentIdDeleteAsync(string agentId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteAgentApiV1AgentsAgentIdDelete(agentId);

                FormatDeleteAgentApiV1AgentsAgentIdDelete(ref agentId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/agents/{agent_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bagent_id%7D", Uri.EscapeDataString(agentId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteAgentApiV1AgentsAgentIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteAgentApiV1AgentsAgentIdDeleteApiResponse>();

                        DeleteAgentApiV1AgentsAgentIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/agents/{agent_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteAgentApiV1AgentsAgentIdDeleteDefaultImplementation(apiResponseLocalVar, agentId);

                        Events.ExecuteOnDeleteAgentApiV1AgentsAgentIdDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteAgentApiV1AgentsAgentIdDeleteDefaultImplementation(e, "/api/v1/agents/{agent_id}", uriBuilderLocalVar.Path, agentId);
                Events.ExecuteOnErrorDeleteAgentApiV1AgentsAgentIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteAgentApiV1AgentsAgentIdDeleteApiResponse"/>
        /// </summary>
        public partial class DeleteAgentApiV1AgentsAgentIdDeleteApiResponse : XperiencesAI.SDK.Client.ApiResponse, IDeleteAgentApiV1AgentsAgentIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteAgentApiV1AgentsAgentIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteAgentApiV1AgentsAgentIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteAgentApiV1AgentsAgentIdDeleteApiResponse(ILogger<DeleteAgentApiV1AgentsAgentIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public XperiencesAI.SDK.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<XperiencesAI.SDK.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out XperiencesAI.SDK.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAgentApiV1AgentsAgentIdGet(ref string agentId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="agentId"></param>
        /// <returns></returns>
        private void ValidateGetAgentApiV1AgentsAgentIdGet(string agentId)
        {
            if (agentId == null)
                throw new ArgumentNullException(nameof(agentId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="agentId"></param>
        private void AfterGetAgentApiV1AgentsAgentIdGetDefaultImplementation(IGetAgentApiV1AgentsAgentIdGetApiResponse apiResponseLocalVar, string agentId)
        {
            bool suppressDefaultLog = false;
            AfterGetAgentApiV1AgentsAgentIdGet(ref suppressDefaultLog, apiResponseLocalVar, agentId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="agentId"></param>
        partial void AfterGetAgentApiV1AgentsAgentIdGet(ref bool suppressDefaultLog, IGetAgentApiV1AgentsAgentIdGetApiResponse apiResponseLocalVar, string agentId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="agentId"></param>
        private void OnErrorGetAgentApiV1AgentsAgentIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string agentId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAgentApiV1AgentsAgentIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, agentId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="agentId"></param>
        partial void OnErrorGetAgentApiV1AgentsAgentIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string agentId);

        /// <summary>
        /// Get Agent Get an agent by ID.
        /// </summary>
        /// <param name="agentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAgentApiV1AgentsAgentIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetAgentApiV1AgentsAgentIdGetApiResponse?> GetAgentApiV1AgentsAgentIdGetOrDefaultAsync(string agentId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAgentApiV1AgentsAgentIdGetAsync(agentId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Agent Get an agent by ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAgentApiV1AgentsAgentIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetAgentApiV1AgentsAgentIdGetApiResponse> GetAgentApiV1AgentsAgentIdGetAsync(string agentId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAgentApiV1AgentsAgentIdGet(agentId);

                FormatGetAgentApiV1AgentsAgentIdGet(ref agentId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/agents/{agent_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bagent_id%7D", Uri.EscapeDataString(agentId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAgentApiV1AgentsAgentIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAgentApiV1AgentsAgentIdGetApiResponse>();

                        GetAgentApiV1AgentsAgentIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/agents/{agent_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAgentApiV1AgentsAgentIdGetDefaultImplementation(apiResponseLocalVar, agentId);

                        Events.ExecuteOnGetAgentApiV1AgentsAgentIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAgentApiV1AgentsAgentIdGetDefaultImplementation(e, "/api/v1/agents/{agent_id}", uriBuilderLocalVar.Path, agentId);
                Events.ExecuteOnErrorGetAgentApiV1AgentsAgentIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAgentApiV1AgentsAgentIdGetApiResponse"/>
        /// </summary>
        public partial class GetAgentApiV1AgentsAgentIdGetApiResponse : XperiencesAI.SDK.Client.ApiResponse, IGetAgentApiV1AgentsAgentIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAgentApiV1AgentsAgentIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAgentApiV1AgentsAgentIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAgentApiV1AgentsAgentIdGetApiResponse(ILogger<GetAgentApiV1AgentsAgentIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public XperiencesAI.SDK.Model.AgentResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<XperiencesAI.SDK.Model.AgentResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out XperiencesAI.SDK.Model.AgentResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public XperiencesAI.SDK.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<XperiencesAI.SDK.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out XperiencesAI.SDK.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetConversationApiV1AgentsAgentIdConversationsConversationIdGet(ref string agentId, ref string conversationId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="agentId"></param>
        /// <param name="conversationId"></param>
        /// <returns></returns>
        private void ValidateGetConversationApiV1AgentsAgentIdConversationsConversationIdGet(string agentId, string conversationId)
        {
            if (agentId == null)
                throw new ArgumentNullException(nameof(agentId));

            if (conversationId == null)
                throw new ArgumentNullException(nameof(conversationId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="agentId"></param>
        /// <param name="conversationId"></param>
        private void AfterGetConversationApiV1AgentsAgentIdConversationsConversationIdGetDefaultImplementation(IGetConversationApiV1AgentsAgentIdConversationsConversationIdGetApiResponse apiResponseLocalVar, string agentId, string conversationId)
        {
            bool suppressDefaultLog = false;
            AfterGetConversationApiV1AgentsAgentIdConversationsConversationIdGet(ref suppressDefaultLog, apiResponseLocalVar, agentId, conversationId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="agentId"></param>
        /// <param name="conversationId"></param>
        partial void AfterGetConversationApiV1AgentsAgentIdConversationsConversationIdGet(ref bool suppressDefaultLog, IGetConversationApiV1AgentsAgentIdConversationsConversationIdGetApiResponse apiResponseLocalVar, string agentId, string conversationId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="agentId"></param>
        /// <param name="conversationId"></param>
        private void OnErrorGetConversationApiV1AgentsAgentIdConversationsConversationIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string agentId, string conversationId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetConversationApiV1AgentsAgentIdConversationsConversationIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, agentId, conversationId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="agentId"></param>
        /// <param name="conversationId"></param>
        partial void OnErrorGetConversationApiV1AgentsAgentIdConversationsConversationIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string agentId, string conversationId);

        /// <summary>
        /// Get Conversation Get conversation details by ID.
        /// </summary>
        /// <param name="agentId"></param>
        /// <param name="conversationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConversationApiV1AgentsAgentIdConversationsConversationIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetConversationApiV1AgentsAgentIdConversationsConversationIdGetApiResponse?> GetConversationApiV1AgentsAgentIdConversationsConversationIdGetOrDefaultAsync(string agentId, string conversationId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetConversationApiV1AgentsAgentIdConversationsConversationIdGetAsync(agentId, conversationId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Conversation Get conversation details by ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId"></param>
        /// <param name="conversationId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConversationApiV1AgentsAgentIdConversationsConversationIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetConversationApiV1AgentsAgentIdConversationsConversationIdGetApiResponse> GetConversationApiV1AgentsAgentIdConversationsConversationIdGetAsync(string agentId, string conversationId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetConversationApiV1AgentsAgentIdConversationsConversationIdGet(agentId, conversationId);

                FormatGetConversationApiV1AgentsAgentIdConversationsConversationIdGet(ref agentId, ref conversationId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/agents/{agent_id}/conversations/{conversation_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bagent_id%7D", Uri.EscapeDataString(agentId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bconversation_id%7D", Uri.EscapeDataString(conversationId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetConversationApiV1AgentsAgentIdConversationsConversationIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetConversationApiV1AgentsAgentIdConversationsConversationIdGetApiResponse>();

                        GetConversationApiV1AgentsAgentIdConversationsConversationIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/agents/{agent_id}/conversations/{conversation_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetConversationApiV1AgentsAgentIdConversationsConversationIdGetDefaultImplementation(apiResponseLocalVar, agentId, conversationId);

                        Events.ExecuteOnGetConversationApiV1AgentsAgentIdConversationsConversationIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetConversationApiV1AgentsAgentIdConversationsConversationIdGetDefaultImplementation(e, "/api/v1/agents/{agent_id}/conversations/{conversation_id}", uriBuilderLocalVar.Path, agentId, conversationId);
                Events.ExecuteOnErrorGetConversationApiV1AgentsAgentIdConversationsConversationIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetConversationApiV1AgentsAgentIdConversationsConversationIdGetApiResponse"/>
        /// </summary>
        public partial class GetConversationApiV1AgentsAgentIdConversationsConversationIdGetApiResponse : XperiencesAI.SDK.Client.ApiResponse, IGetConversationApiV1AgentsAgentIdConversationsConversationIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetConversationApiV1AgentsAgentIdConversationsConversationIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetConversationApiV1AgentsAgentIdConversationsConversationIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetConversationApiV1AgentsAgentIdConversationsConversationIdGetApiResponse(ILogger<GetConversationApiV1AgentsAgentIdConversationsConversationIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public XperiencesAI.SDK.Model.Conversation? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<XperiencesAI.SDK.Model.Conversation>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out XperiencesAI.SDK.Model.Conversation? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public XperiencesAI.SDK.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<XperiencesAI.SDK.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out XperiencesAI.SDK.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListAgentsApiV1AgentsGet(ref Option<int> skip, ref Option<int> limit);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="skip"></param>
        /// <param name="limit"></param>
        private void AfterListAgentsApiV1AgentsGetDefaultImplementation(IListAgentsApiV1AgentsGetApiResponse apiResponseLocalVar, Option<int> skip, Option<int> limit)
        {
            bool suppressDefaultLog = false;
            AfterListAgentsApiV1AgentsGet(ref suppressDefaultLog, apiResponseLocalVar, skip, limit);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="skip"></param>
        /// <param name="limit"></param>
        partial void AfterListAgentsApiV1AgentsGet(ref bool suppressDefaultLog, IListAgentsApiV1AgentsGetApiResponse apiResponseLocalVar, Option<int> skip, Option<int> limit);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="skip"></param>
        /// <param name="limit"></param>
        private void OnErrorListAgentsApiV1AgentsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> skip, Option<int> limit)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListAgentsApiV1AgentsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, skip, limit);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="skip"></param>
        /// <param name="limit"></param>
        partial void OnErrorListAgentsApiV1AgentsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> skip, Option<int> limit);

        /// <summary>
        /// List Agents List all available agents.  Args:     agent_service: Injected AgentService instance     auth: Authentication dependency     skip: Number of agents to skip     limit: Maximum number of agents to return  Returns:     List of agents
        /// </summary>
        /// <param name="skip">Number of agents to skip (optional, default to 0)</param>
        /// <param name="limit">Max number of agents (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListAgentsApiV1AgentsGetApiResponse"/>&gt;</returns>
        public async Task<IListAgentsApiV1AgentsGetApiResponse?> ListAgentsApiV1AgentsGetOrDefaultAsync(Option<int> skip = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListAgentsApiV1AgentsGetAsync(skip, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List Agents List all available agents.  Args:     agent_service: Injected AgentService instance     auth: Authentication dependency     skip: Number of agents to skip     limit: Maximum number of agents to return  Returns:     List of agents
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="skip">Number of agents to skip (optional, default to 0)</param>
        /// <param name="limit">Max number of agents (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListAgentsApiV1AgentsGetApiResponse"/>&gt;</returns>
        public async Task<IListAgentsApiV1AgentsGetApiResponse> ListAgentsApiV1AgentsGetAsync(Option<int> skip = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatListAgentsApiV1AgentsGet(ref skip, ref limit);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/agents/");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (skip.IsSet)
                        parseQueryStringLocalVar["skip"] = ClientUtils.ParameterToString(skip.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListAgentsApiV1AgentsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListAgentsApiV1AgentsGetApiResponse>();

                        ListAgentsApiV1AgentsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/agents/", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListAgentsApiV1AgentsGetDefaultImplementation(apiResponseLocalVar, skip, limit);

                        Events.ExecuteOnListAgentsApiV1AgentsGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListAgentsApiV1AgentsGetDefaultImplementation(e, "/api/v1/agents/", uriBuilderLocalVar.Path, skip, limit);
                Events.ExecuteOnErrorListAgentsApiV1AgentsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListAgentsApiV1AgentsGetApiResponse"/>
        /// </summary>
        public partial class ListAgentsApiV1AgentsGetApiResponse : XperiencesAI.SDK.Client.ApiResponse, IListAgentsApiV1AgentsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListAgentsApiV1AgentsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListAgentsApiV1AgentsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListAgentsApiV1AgentsGetApiResponse(ILogger<ListAgentsApiV1AgentsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<Agent>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<Agent>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<Agent>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public XperiencesAI.SDK.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<XperiencesAI.SDK.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out XperiencesAI.SDK.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListConversationsApiV1AgentsAgentIdConversationsGet(ref string agentId, ref Option<int> skip, ref Option<int> limit);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="agentId"></param>
        /// <returns></returns>
        private void ValidateListConversationsApiV1AgentsAgentIdConversationsGet(string agentId)
        {
            if (agentId == null)
                throw new ArgumentNullException(nameof(agentId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="agentId"></param>
        /// <param name="skip"></param>
        /// <param name="limit"></param>
        private void AfterListConversationsApiV1AgentsAgentIdConversationsGetDefaultImplementation(IListConversationsApiV1AgentsAgentIdConversationsGetApiResponse apiResponseLocalVar, string agentId, Option<int> skip, Option<int> limit)
        {
            bool suppressDefaultLog = false;
            AfterListConversationsApiV1AgentsAgentIdConversationsGet(ref suppressDefaultLog, apiResponseLocalVar, agentId, skip, limit);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="agentId"></param>
        /// <param name="skip"></param>
        /// <param name="limit"></param>
        partial void AfterListConversationsApiV1AgentsAgentIdConversationsGet(ref bool suppressDefaultLog, IListConversationsApiV1AgentsAgentIdConversationsGetApiResponse apiResponseLocalVar, string agentId, Option<int> skip, Option<int> limit);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="agentId"></param>
        /// <param name="skip"></param>
        /// <param name="limit"></param>
        private void OnErrorListConversationsApiV1AgentsAgentIdConversationsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string agentId, Option<int> skip, Option<int> limit)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListConversationsApiV1AgentsAgentIdConversationsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, agentId, skip, limit);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="agentId"></param>
        /// <param name="skip"></param>
        /// <param name="limit"></param>
        partial void OnErrorListConversationsApiV1AgentsAgentIdConversationsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string agentId, Option<int> skip, Option<int> limit);

        /// <summary>
        /// List Conversations List all conversations for an agent.
        /// </summary>
        /// <param name="agentId"></param>
        /// <param name="skip">Number of conversations to skip (optional, default to 0)</param>
        /// <param name="limit">Max conversations (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListConversationsApiV1AgentsAgentIdConversationsGetApiResponse"/>&gt;</returns>
        public async Task<IListConversationsApiV1AgentsAgentIdConversationsGetApiResponse?> ListConversationsApiV1AgentsAgentIdConversationsGetOrDefaultAsync(string agentId, Option<int> skip = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListConversationsApiV1AgentsAgentIdConversationsGetAsync(agentId, skip, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List Conversations List all conversations for an agent.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId"></param>
        /// <param name="skip">Number of conversations to skip (optional, default to 0)</param>
        /// <param name="limit">Max conversations (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListConversationsApiV1AgentsAgentIdConversationsGetApiResponse"/>&gt;</returns>
        public async Task<IListConversationsApiV1AgentsAgentIdConversationsGetApiResponse> ListConversationsApiV1AgentsAgentIdConversationsGetAsync(string agentId, Option<int> skip = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListConversationsApiV1AgentsAgentIdConversationsGet(agentId);

                FormatListConversationsApiV1AgentsAgentIdConversationsGet(ref agentId, ref skip, ref limit);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/agents/{agent_id}/conversations");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bagent_id%7D", Uri.EscapeDataString(agentId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (skip.IsSet)
                        parseQueryStringLocalVar["skip"] = ClientUtils.ParameterToString(skip.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListConversationsApiV1AgentsAgentIdConversationsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListConversationsApiV1AgentsAgentIdConversationsGetApiResponse>();

                        ListConversationsApiV1AgentsAgentIdConversationsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/agents/{agent_id}/conversations", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListConversationsApiV1AgentsAgentIdConversationsGetDefaultImplementation(apiResponseLocalVar, agentId, skip, limit);

                        Events.ExecuteOnListConversationsApiV1AgentsAgentIdConversationsGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListConversationsApiV1AgentsAgentIdConversationsGetDefaultImplementation(e, "/api/v1/agents/{agent_id}/conversations", uriBuilderLocalVar.Path, agentId, skip, limit);
                Events.ExecuteOnErrorListConversationsApiV1AgentsAgentIdConversationsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListConversationsApiV1AgentsAgentIdConversationsGetApiResponse"/>
        /// </summary>
        public partial class ListConversationsApiV1AgentsAgentIdConversationsGetApiResponse : XperiencesAI.SDK.Client.ApiResponse, IListConversationsApiV1AgentsAgentIdConversationsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListConversationsApiV1AgentsAgentIdConversationsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListConversationsApiV1AgentsAgentIdConversationsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListConversationsApiV1AgentsAgentIdConversationsGetApiResponse(ILogger<ListConversationsApiV1AgentsAgentIdConversationsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<Conversation>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<Conversation>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<Conversation>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public XperiencesAI.SDK.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<XperiencesAI.SDK.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out XperiencesAI.SDK.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGet(ref string agentId, ref string conversationId, ref Option<int> skip, ref Option<int> limit);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="agentId"></param>
        /// <param name="conversationId"></param>
        /// <returns></returns>
        private void ValidateListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGet(string agentId, string conversationId)
        {
            if (agentId == null)
                throw new ArgumentNullException(nameof(agentId));

            if (conversationId == null)
                throw new ArgumentNullException(nameof(conversationId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="agentId"></param>
        /// <param name="conversationId"></param>
        /// <param name="skip"></param>
        /// <param name="limit"></param>
        private void AfterListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGetDefaultImplementation(IListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGetApiResponse apiResponseLocalVar, string agentId, string conversationId, Option<int> skip, Option<int> limit)
        {
            bool suppressDefaultLog = false;
            AfterListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGet(ref suppressDefaultLog, apiResponseLocalVar, agentId, conversationId, skip, limit);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="agentId"></param>
        /// <param name="conversationId"></param>
        /// <param name="skip"></param>
        /// <param name="limit"></param>
        partial void AfterListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGet(ref bool suppressDefaultLog, IListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGetApiResponse apiResponseLocalVar, string agentId, string conversationId, Option<int> skip, Option<int> limit);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="agentId"></param>
        /// <param name="conversationId"></param>
        /// <param name="skip"></param>
        /// <param name="limit"></param>
        private void OnErrorListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string agentId, string conversationId, Option<int> skip, Option<int> limit)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, agentId, conversationId, skip, limit);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="agentId"></param>
        /// <param name="conversationId"></param>
        /// <param name="skip"></param>
        /// <param name="limit"></param>
        partial void OnErrorListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string agentId, string conversationId, Option<int> skip, Option<int> limit);

        /// <summary>
        /// List Messages List all messages for a conversation.
        /// </summary>
        /// <param name="agentId"></param>
        /// <param name="conversationId"></param>
        /// <param name="skip">Number of messages to skip (optional, default to 0)</param>
        /// <param name="limit">Max messages to return (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGetApiResponse"/>&gt;</returns>
        public async Task<IListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGetApiResponse?> ListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGetOrDefaultAsync(string agentId, string conversationId, Option<int> skip = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGetAsync(agentId, conversationId, skip, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List Messages List all messages for a conversation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId"></param>
        /// <param name="conversationId"></param>
        /// <param name="skip">Number of messages to skip (optional, default to 0)</param>
        /// <param name="limit">Max messages to return (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGetApiResponse"/>&gt;</returns>
        public async Task<IListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGetApiResponse> ListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGetAsync(string agentId, string conversationId, Option<int> skip = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGet(agentId, conversationId);

                FormatListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGet(ref agentId, ref conversationId, ref skip, ref limit);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/agents/{agent_id}/conversations/{conversation_id}/messages");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bagent_id%7D", Uri.EscapeDataString(agentId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bconversation_id%7D", Uri.EscapeDataString(conversationId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (skip.IsSet)
                        parseQueryStringLocalVar["skip"] = ClientUtils.ParameterToString(skip.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGetApiResponse>();

                        ListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/agents/{agent_id}/conversations/{conversation_id}/messages", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGetDefaultImplementation(apiResponseLocalVar, agentId, conversationId, skip, limit);

                        Events.ExecuteOnListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGetDefaultImplementation(e, "/api/v1/agents/{agent_id}/conversations/{conversation_id}/messages", uriBuilderLocalVar.Path, agentId, conversationId, skip, limit);
                Events.ExecuteOnErrorListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGetApiResponse"/>
        /// </summary>
        public partial class ListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGetApiResponse : XperiencesAI.SDK.Client.ApiResponse, IListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGetApiResponse(ILogger<ListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<Message>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<Message>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<Message>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public XperiencesAI.SDK.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<XperiencesAI.SDK.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out XperiencesAI.SDK.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatProcessSpeechApiV1AgentsAgentIdSpeechPost(ref string agentId, ref System.IO.Stream audioFile);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="agentId"></param>
        /// <param name="audioFile"></param>
        /// <returns></returns>
        private void ValidateProcessSpeechApiV1AgentsAgentIdSpeechPost(string agentId, System.IO.Stream audioFile)
        {
            if (agentId == null)
                throw new ArgumentNullException(nameof(agentId));

            if (audioFile == null)
                throw new ArgumentNullException(nameof(audioFile));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="agentId"></param>
        /// <param name="audioFile"></param>
        private void AfterProcessSpeechApiV1AgentsAgentIdSpeechPostDefaultImplementation(IProcessSpeechApiV1AgentsAgentIdSpeechPostApiResponse apiResponseLocalVar, string agentId, System.IO.Stream audioFile)
        {
            bool suppressDefaultLog = false;
            AfterProcessSpeechApiV1AgentsAgentIdSpeechPost(ref suppressDefaultLog, apiResponseLocalVar, agentId, audioFile);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="agentId"></param>
        /// <param name="audioFile"></param>
        partial void AfterProcessSpeechApiV1AgentsAgentIdSpeechPost(ref bool suppressDefaultLog, IProcessSpeechApiV1AgentsAgentIdSpeechPostApiResponse apiResponseLocalVar, string agentId, System.IO.Stream audioFile);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="agentId"></param>
        /// <param name="audioFile"></param>
        private void OnErrorProcessSpeechApiV1AgentsAgentIdSpeechPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string agentId, System.IO.Stream audioFile)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorProcessSpeechApiV1AgentsAgentIdSpeechPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, agentId, audioFile);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="agentId"></param>
        /// <param name="audioFile"></param>
        partial void OnErrorProcessSpeechApiV1AgentsAgentIdSpeechPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string agentId, System.IO.Stream audioFile);

        /// <summary>
        /// Process Speech Process speech input and return response.
        /// </summary>
        /// <param name="agentId"></param>
        /// <param name="audioFile"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProcessSpeechApiV1AgentsAgentIdSpeechPostApiResponse"/>&gt;</returns>
        public async Task<IProcessSpeechApiV1AgentsAgentIdSpeechPostApiResponse?> ProcessSpeechApiV1AgentsAgentIdSpeechPostOrDefaultAsync(string agentId, System.IO.Stream audioFile, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ProcessSpeechApiV1AgentsAgentIdSpeechPostAsync(agentId, audioFile, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Process Speech Process speech input and return response.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId"></param>
        /// <param name="audioFile"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProcessSpeechApiV1AgentsAgentIdSpeechPostApiResponse"/>&gt;</returns>
        public async Task<IProcessSpeechApiV1AgentsAgentIdSpeechPostApiResponse> ProcessSpeechApiV1AgentsAgentIdSpeechPostAsync(string agentId, System.IO.Stream audioFile, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateProcessSpeechApiV1AgentsAgentIdSpeechPost(agentId, audioFile);

                FormatProcessSpeechApiV1AgentsAgentIdSpeechPost(ref agentId, ref audioFile);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/agents/{agent_id}/speech");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bagent_id%7D", Uri.EscapeDataString(agentId.ToString()));

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    multipartContentLocalVar.Add(new StreamContent(audioFile));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "multipart/form-data"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ProcessSpeechApiV1AgentsAgentIdSpeechPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ProcessSpeechApiV1AgentsAgentIdSpeechPostApiResponse>();

                        ProcessSpeechApiV1AgentsAgentIdSpeechPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/agents/{agent_id}/speech", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterProcessSpeechApiV1AgentsAgentIdSpeechPostDefaultImplementation(apiResponseLocalVar, agentId, audioFile);

                        Events.ExecuteOnProcessSpeechApiV1AgentsAgentIdSpeechPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorProcessSpeechApiV1AgentsAgentIdSpeechPostDefaultImplementation(e, "/api/v1/agents/{agent_id}/speech", uriBuilderLocalVar.Path, agentId, audioFile);
                Events.ExecuteOnErrorProcessSpeechApiV1AgentsAgentIdSpeechPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ProcessSpeechApiV1AgentsAgentIdSpeechPostApiResponse"/>
        /// </summary>
        public partial class ProcessSpeechApiV1AgentsAgentIdSpeechPostApiResponse : XperiencesAI.SDK.Client.ApiResponse, IProcessSpeechApiV1AgentsAgentIdSpeechPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ProcessSpeechApiV1AgentsAgentIdSpeechPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ProcessSpeechApiV1AgentsAgentIdSpeechPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ProcessSpeechApiV1AgentsAgentIdSpeechPostApiResponse(ILogger<ProcessSpeechApiV1AgentsAgentIdSpeechPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public XperiencesAI.SDK.Model.MessageResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<XperiencesAI.SDK.Model.MessageResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out XperiencesAI.SDK.Model.MessageResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public XperiencesAI.SDK.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<XperiencesAI.SDK.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out XperiencesAI.SDK.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatProcessTextApiV1AgentsAgentIdTextPost(ref string agentId, TextRequest textRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="agentId"></param>
        /// <param name="textRequest"></param>
        /// <returns></returns>
        private void ValidateProcessTextApiV1AgentsAgentIdTextPost(string agentId, TextRequest textRequest)
        {
            if (agentId == null)
                throw new ArgumentNullException(nameof(agentId));

            if (textRequest == null)
                throw new ArgumentNullException(nameof(textRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="agentId"></param>
        /// <param name="textRequest"></param>
        private void AfterProcessTextApiV1AgentsAgentIdTextPostDefaultImplementation(IProcessTextApiV1AgentsAgentIdTextPostApiResponse apiResponseLocalVar, string agentId, TextRequest textRequest)
        {
            bool suppressDefaultLog = false;
            AfterProcessTextApiV1AgentsAgentIdTextPost(ref suppressDefaultLog, apiResponseLocalVar, agentId, textRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="agentId"></param>
        /// <param name="textRequest"></param>
        partial void AfterProcessTextApiV1AgentsAgentIdTextPost(ref bool suppressDefaultLog, IProcessTextApiV1AgentsAgentIdTextPostApiResponse apiResponseLocalVar, string agentId, TextRequest textRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="agentId"></param>
        /// <param name="textRequest"></param>
        private void OnErrorProcessTextApiV1AgentsAgentIdTextPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string agentId, TextRequest textRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorProcessTextApiV1AgentsAgentIdTextPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, agentId, textRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="agentId"></param>
        /// <param name="textRequest"></param>
        partial void OnErrorProcessTextApiV1AgentsAgentIdTextPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string agentId, TextRequest textRequest);

        /// <summary>
        /// Process Text Process text input for an agent.
        /// </summary>
        /// <param name="agentId"></param>
        /// <param name="textRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProcessTextApiV1AgentsAgentIdTextPostApiResponse"/>&gt;</returns>
        public async Task<IProcessTextApiV1AgentsAgentIdTextPostApiResponse?> ProcessTextApiV1AgentsAgentIdTextPostOrDefaultAsync(string agentId, TextRequest textRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ProcessTextApiV1AgentsAgentIdTextPostAsync(agentId, textRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Process Text Process text input for an agent.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId"></param>
        /// <param name="textRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProcessTextApiV1AgentsAgentIdTextPostApiResponse"/>&gt;</returns>
        public async Task<IProcessTextApiV1AgentsAgentIdTextPostApiResponse> ProcessTextApiV1AgentsAgentIdTextPostAsync(string agentId, TextRequest textRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateProcessTextApiV1AgentsAgentIdTextPost(agentId, textRequest);

                FormatProcessTextApiV1AgentsAgentIdTextPost(ref agentId, textRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/agents/{agent_id}/text");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bagent_id%7D", Uri.EscapeDataString(agentId.ToString()));

                    httpRequestMessageLocalVar.Content = (textRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(textRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ProcessTextApiV1AgentsAgentIdTextPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ProcessTextApiV1AgentsAgentIdTextPostApiResponse>();

                        ProcessTextApiV1AgentsAgentIdTextPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/agents/{agent_id}/text", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterProcessTextApiV1AgentsAgentIdTextPostDefaultImplementation(apiResponseLocalVar, agentId, textRequest);

                        Events.ExecuteOnProcessTextApiV1AgentsAgentIdTextPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorProcessTextApiV1AgentsAgentIdTextPostDefaultImplementation(e, "/api/v1/agents/{agent_id}/text", uriBuilderLocalVar.Path, agentId, textRequest);
                Events.ExecuteOnErrorProcessTextApiV1AgentsAgentIdTextPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ProcessTextApiV1AgentsAgentIdTextPostApiResponse"/>
        /// </summary>
        public partial class ProcessTextApiV1AgentsAgentIdTextPostApiResponse : XperiencesAI.SDK.Client.ApiResponse, IProcessTextApiV1AgentsAgentIdTextPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ProcessTextApiV1AgentsAgentIdTextPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ProcessTextApiV1AgentsAgentIdTextPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ProcessTextApiV1AgentsAgentIdTextPostApiResponse(ILogger<ProcessTextApiV1AgentsAgentIdTextPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public XperiencesAI.SDK.Model.TextResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<XperiencesAI.SDK.Model.TextResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out XperiencesAI.SDK.Model.TextResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public XperiencesAI.SDK.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<XperiencesAI.SDK.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out XperiencesAI.SDK.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateAgentApiV1AgentsAgentIdPut(ref string agentId, AgentUpdate agentUpdate);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="agentId"></param>
        /// <param name="agentUpdate"></param>
        /// <returns></returns>
        private void ValidateUpdateAgentApiV1AgentsAgentIdPut(string agentId, AgentUpdate agentUpdate)
        {
            if (agentId == null)
                throw new ArgumentNullException(nameof(agentId));

            if (agentUpdate == null)
                throw new ArgumentNullException(nameof(agentUpdate));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="agentId"></param>
        /// <param name="agentUpdate"></param>
        private void AfterUpdateAgentApiV1AgentsAgentIdPutDefaultImplementation(IUpdateAgentApiV1AgentsAgentIdPutApiResponse apiResponseLocalVar, string agentId, AgentUpdate agentUpdate)
        {
            bool suppressDefaultLog = false;
            AfterUpdateAgentApiV1AgentsAgentIdPut(ref suppressDefaultLog, apiResponseLocalVar, agentId, agentUpdate);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="agentId"></param>
        /// <param name="agentUpdate"></param>
        partial void AfterUpdateAgentApiV1AgentsAgentIdPut(ref bool suppressDefaultLog, IUpdateAgentApiV1AgentsAgentIdPutApiResponse apiResponseLocalVar, string agentId, AgentUpdate agentUpdate);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="agentId"></param>
        /// <param name="agentUpdate"></param>
        private void OnErrorUpdateAgentApiV1AgentsAgentIdPutDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string agentId, AgentUpdate agentUpdate)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateAgentApiV1AgentsAgentIdPut(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, agentId, agentUpdate);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="agentId"></param>
        /// <param name="agentUpdate"></param>
        partial void OnErrorUpdateAgentApiV1AgentsAgentIdPut(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string agentId, AgentUpdate agentUpdate);

        /// <summary>
        /// Update Agent Update an agent.  Args:     agent_id: Agent ID     agent_update: Agent update data     agent_service: Injected AgentService instance     agent: Current agent model from dependency     auth: Authentication dependency  Returns:     Updated agent
        /// </summary>
        /// <param name="agentId"></param>
        /// <param name="agentUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateAgentApiV1AgentsAgentIdPutApiResponse"/>&gt;</returns>
        public async Task<IUpdateAgentApiV1AgentsAgentIdPutApiResponse?> UpdateAgentApiV1AgentsAgentIdPutOrDefaultAsync(string agentId, AgentUpdate agentUpdate, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateAgentApiV1AgentsAgentIdPutAsync(agentId, agentUpdate, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Agent Update an agent.  Args:     agent_id: Agent ID     agent_update: Agent update data     agent_service: Injected AgentService instance     agent: Current agent model from dependency     auth: Authentication dependency  Returns:     Updated agent
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentId"></param>
        /// <param name="agentUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateAgentApiV1AgentsAgentIdPutApiResponse"/>&gt;</returns>
        public async Task<IUpdateAgentApiV1AgentsAgentIdPutApiResponse> UpdateAgentApiV1AgentsAgentIdPutAsync(string agentId, AgentUpdate agentUpdate, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateAgentApiV1AgentsAgentIdPut(agentId, agentUpdate);

                FormatUpdateAgentApiV1AgentsAgentIdPut(ref agentId, agentUpdate);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/agents/{agent_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bagent_id%7D", Uri.EscapeDataString(agentId.ToString()));

                    httpRequestMessageLocalVar.Content = (agentUpdate as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(agentUpdate, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateAgentApiV1AgentsAgentIdPutApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateAgentApiV1AgentsAgentIdPutApiResponse>();

                        UpdateAgentApiV1AgentsAgentIdPutApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/agents/{agent_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateAgentApiV1AgentsAgentIdPutDefaultImplementation(apiResponseLocalVar, agentId, agentUpdate);

                        Events.ExecuteOnUpdateAgentApiV1AgentsAgentIdPut(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateAgentApiV1AgentsAgentIdPutDefaultImplementation(e, "/api/v1/agents/{agent_id}", uriBuilderLocalVar.Path, agentId, agentUpdate);
                Events.ExecuteOnErrorUpdateAgentApiV1AgentsAgentIdPut(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateAgentApiV1AgentsAgentIdPutApiResponse"/>
        /// </summary>
        public partial class UpdateAgentApiV1AgentsAgentIdPutApiResponse : XperiencesAI.SDK.Client.ApiResponse, IUpdateAgentApiV1AgentsAgentIdPutApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateAgentApiV1AgentsAgentIdPutApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateAgentApiV1AgentsAgentIdPutApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateAgentApiV1AgentsAgentIdPutApiResponse(ILogger<UpdateAgentApiV1AgentsAgentIdPutApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public XperiencesAI.SDK.Model.Agent? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<XperiencesAI.SDK.Model.Agent>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out XperiencesAI.SDK.Model.Agent? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public XperiencesAI.SDK.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<XperiencesAI.SDK.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out XperiencesAI.SDK.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
