// <auto-generated>
/*
 * Xperiences API
 *
 * API for VR mentoring experiences
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@xperiences.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using XperiencesAI.SDK.Client;
using XperiencesAI.SDK.Model;
using System.Diagnostics.CodeAnalysis;

namespace XperiencesAI.SDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IChatApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ChatApiEvents Events { get; }

        /// <summary>
        /// Create Chat
        /// </summary>
        /// <remarks>
        /// Create a new chat.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateChatApiV1ChatChatsPostApiResponse"/>&gt;</returns>
        Task<ICreateChatApiV1ChatChatsPostApiResponse> CreateChatApiV1ChatChatsPostAsync(ConversationCreate conversationCreate, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Chat
        /// </summary>
        /// <remarks>
        /// Create a new chat.
        /// </remarks>
        /// <param name="conversationCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateChatApiV1ChatChatsPostApiResponse"/>?&gt;</returns>
        Task<ICreateChatApiV1ChatChatsPostApiResponse?> CreateChatApiV1ChatChatsPostOrDefaultAsync(ConversationCreate conversationCreate, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Message
        /// </summary>
        /// <remarks>
        /// Create a new message in a chat.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId"></param>
        /// <param name="messageCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateMessageApiV1ChatChatsChatIdMessagesPostApiResponse"/>&gt;</returns>
        Task<ICreateMessageApiV1ChatChatsChatIdMessagesPostApiResponse> CreateMessageApiV1ChatChatsChatIdMessagesPostAsync(string chatId, MessageCreate messageCreate, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Message
        /// </summary>
        /// <remarks>
        /// Create a new message in a chat.
        /// </remarks>
        /// <param name="chatId"></param>
        /// <param name="messageCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateMessageApiV1ChatChatsChatIdMessagesPostApiResponse"/>?&gt;</returns>
        Task<ICreateMessageApiV1ChatChatsChatIdMessagesPostApiResponse?> CreateMessageApiV1ChatChatsChatIdMessagesPostOrDefaultAsync(string chatId, MessageCreate messageCreate, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Chat
        /// </summary>
        /// <remarks>
        /// Get a chat by ID.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChatApiV1ChatChatsChatIdGetApiResponse"/>&gt;</returns>
        Task<IGetChatApiV1ChatChatsChatIdGetApiResponse> GetChatApiV1ChatChatsChatIdGetAsync(string chatId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Chat
        /// </summary>
        /// <remarks>
        /// Get a chat by ID.
        /// </remarks>
        /// <param name="chatId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChatApiV1ChatChatsChatIdGetApiResponse"/>?&gt;</returns>
        Task<IGetChatApiV1ChatChatsChatIdGetApiResponse?> GetChatApiV1ChatChatsChatIdGetOrDefaultAsync(string chatId, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateChatApiV1ChatChatsPostApiResponse"/>
    /// </summary>
    public interface ICreateChatApiV1ChatChatsPostApiResponse : XperiencesAI.SDK.Client.IApiResponse, IOk<XperiencesAI.SDK.Model.ConversationResponse?>, IUnprocessableContent<XperiencesAI.SDK.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="ICreateMessageApiV1ChatChatsChatIdMessagesPostApiResponse"/>
    /// </summary>
    public interface ICreateMessageApiV1ChatChatsChatIdMessagesPostApiResponse : XperiencesAI.SDK.Client.IApiResponse, IOk<XperiencesAI.SDK.Model.MessageResponse?>, IUnprocessableContent<XperiencesAI.SDK.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetChatApiV1ChatChatsChatIdGetApiResponse"/>
    /// </summary>
    public interface IGetChatApiV1ChatChatsChatIdGetApiResponse : XperiencesAI.SDK.Client.IApiResponse, IOk<XperiencesAI.SDK.Model.ConversationResponse?>, IUnprocessableContent<XperiencesAI.SDK.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ChatApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateChatApiV1ChatChatsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateChatApiV1ChatChatsPost;

        internal void ExecuteOnCreateChatApiV1ChatChatsPost(ChatApi.CreateChatApiV1ChatChatsPostApiResponse apiResponse)
        {
            OnCreateChatApiV1ChatChatsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateChatApiV1ChatChatsPost(Exception exception)
        {
            OnErrorCreateChatApiV1ChatChatsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateMessageApiV1ChatChatsChatIdMessagesPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateMessageApiV1ChatChatsChatIdMessagesPost;

        internal void ExecuteOnCreateMessageApiV1ChatChatsChatIdMessagesPost(ChatApi.CreateMessageApiV1ChatChatsChatIdMessagesPostApiResponse apiResponse)
        {
            OnCreateMessageApiV1ChatChatsChatIdMessagesPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateMessageApiV1ChatChatsChatIdMessagesPost(Exception exception)
        {
            OnErrorCreateMessageApiV1ChatChatsChatIdMessagesPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetChatApiV1ChatChatsChatIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetChatApiV1ChatChatsChatIdGet;

        internal void ExecuteOnGetChatApiV1ChatChatsChatIdGet(ChatApi.GetChatApiV1ChatChatsChatIdGetApiResponse apiResponse)
        {
            OnGetChatApiV1ChatChatsChatIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetChatApiV1ChatChatsChatIdGet(Exception exception)
        {
            OnErrorGetChatApiV1ChatChatsChatIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ChatApi : IChatApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ChatApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ChatApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChatApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChatApi(ILogger<ChatApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ChatApiEvents chatApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ChatApi>();
            HttpClient = httpClient;
            Events = chatApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatCreateChatApiV1ChatChatsPost(ConversationCreate conversationCreate);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="conversationCreate"></param>
        /// <returns></returns>
        private void ValidateCreateChatApiV1ChatChatsPost(ConversationCreate conversationCreate)
        {
            if (conversationCreate == null)
                throw new ArgumentNullException(nameof(conversationCreate));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="conversationCreate"></param>
        private void AfterCreateChatApiV1ChatChatsPostDefaultImplementation(ICreateChatApiV1ChatChatsPostApiResponse apiResponseLocalVar, ConversationCreate conversationCreate)
        {
            bool suppressDefaultLog = false;
            AfterCreateChatApiV1ChatChatsPost(ref suppressDefaultLog, apiResponseLocalVar, conversationCreate);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="conversationCreate"></param>
        partial void AfterCreateChatApiV1ChatChatsPost(ref bool suppressDefaultLog, ICreateChatApiV1ChatChatsPostApiResponse apiResponseLocalVar, ConversationCreate conversationCreate);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="conversationCreate"></param>
        private void OnErrorCreateChatApiV1ChatChatsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ConversationCreate conversationCreate)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateChatApiV1ChatChatsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, conversationCreate);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="conversationCreate"></param>
        partial void OnErrorCreateChatApiV1ChatChatsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ConversationCreate conversationCreate);

        /// <summary>
        /// Create Chat Create a new chat.
        /// </summary>
        /// <param name="conversationCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateChatApiV1ChatChatsPostApiResponse"/>&gt;</returns>
        public async Task<ICreateChatApiV1ChatChatsPostApiResponse?> CreateChatApiV1ChatChatsPostOrDefaultAsync(ConversationCreate conversationCreate, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateChatApiV1ChatChatsPostAsync(conversationCreate, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create Chat Create a new chat.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateChatApiV1ChatChatsPostApiResponse"/>&gt;</returns>
        public async Task<ICreateChatApiV1ChatChatsPostApiResponse> CreateChatApiV1ChatChatsPostAsync(ConversationCreate conversationCreate, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateChatApiV1ChatChatsPost(conversationCreate);

                FormatCreateChatApiV1ChatChatsPost(conversationCreate);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/chat/chats");

                    httpRequestMessageLocalVar.Content = (conversationCreate as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(conversationCreate, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateChatApiV1ChatChatsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateChatApiV1ChatChatsPostApiResponse>();

                        CreateChatApiV1ChatChatsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/chat/chats", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateChatApiV1ChatChatsPostDefaultImplementation(apiResponseLocalVar, conversationCreate);

                        Events.ExecuteOnCreateChatApiV1ChatChatsPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateChatApiV1ChatChatsPostDefaultImplementation(e, "/api/v1/chat/chats", uriBuilderLocalVar.Path, conversationCreate);
                Events.ExecuteOnErrorCreateChatApiV1ChatChatsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateChatApiV1ChatChatsPostApiResponse"/>
        /// </summary>
        public partial class CreateChatApiV1ChatChatsPostApiResponse : XperiencesAI.SDK.Client.ApiResponse, ICreateChatApiV1ChatChatsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateChatApiV1ChatChatsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateChatApiV1ChatChatsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateChatApiV1ChatChatsPostApiResponse(ILogger<CreateChatApiV1ChatChatsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public XperiencesAI.SDK.Model.ConversationResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<XperiencesAI.SDK.Model.ConversationResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out XperiencesAI.SDK.Model.ConversationResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public XperiencesAI.SDK.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<XperiencesAI.SDK.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out XperiencesAI.SDK.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateMessageApiV1ChatChatsChatIdMessagesPost(ref string chatId, MessageCreate messageCreate);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="chatId"></param>
        /// <param name="messageCreate"></param>
        /// <returns></returns>
        private void ValidateCreateMessageApiV1ChatChatsChatIdMessagesPost(string chatId, MessageCreate messageCreate)
        {
            if (chatId == null)
                throw new ArgumentNullException(nameof(chatId));

            if (messageCreate == null)
                throw new ArgumentNullException(nameof(messageCreate));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="chatId"></param>
        /// <param name="messageCreate"></param>
        private void AfterCreateMessageApiV1ChatChatsChatIdMessagesPostDefaultImplementation(ICreateMessageApiV1ChatChatsChatIdMessagesPostApiResponse apiResponseLocalVar, string chatId, MessageCreate messageCreate)
        {
            bool suppressDefaultLog = false;
            AfterCreateMessageApiV1ChatChatsChatIdMessagesPost(ref suppressDefaultLog, apiResponseLocalVar, chatId, messageCreate);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="chatId"></param>
        /// <param name="messageCreate"></param>
        partial void AfterCreateMessageApiV1ChatChatsChatIdMessagesPost(ref bool suppressDefaultLog, ICreateMessageApiV1ChatChatsChatIdMessagesPostApiResponse apiResponseLocalVar, string chatId, MessageCreate messageCreate);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="chatId"></param>
        /// <param name="messageCreate"></param>
        private void OnErrorCreateMessageApiV1ChatChatsChatIdMessagesPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string chatId, MessageCreate messageCreate)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateMessageApiV1ChatChatsChatIdMessagesPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, chatId, messageCreate);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="chatId"></param>
        /// <param name="messageCreate"></param>
        partial void OnErrorCreateMessageApiV1ChatChatsChatIdMessagesPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string chatId, MessageCreate messageCreate);

        /// <summary>
        /// Create Message Create a new message in a chat.
        /// </summary>
        /// <param name="chatId"></param>
        /// <param name="messageCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateMessageApiV1ChatChatsChatIdMessagesPostApiResponse"/>&gt;</returns>
        public async Task<ICreateMessageApiV1ChatChatsChatIdMessagesPostApiResponse?> CreateMessageApiV1ChatChatsChatIdMessagesPostOrDefaultAsync(string chatId, MessageCreate messageCreate, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateMessageApiV1ChatChatsChatIdMessagesPostAsync(chatId, messageCreate, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create Message Create a new message in a chat.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId"></param>
        /// <param name="messageCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateMessageApiV1ChatChatsChatIdMessagesPostApiResponse"/>&gt;</returns>
        public async Task<ICreateMessageApiV1ChatChatsChatIdMessagesPostApiResponse> CreateMessageApiV1ChatChatsChatIdMessagesPostAsync(string chatId, MessageCreate messageCreate, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateMessageApiV1ChatChatsChatIdMessagesPost(chatId, messageCreate);

                FormatCreateMessageApiV1ChatChatsChatIdMessagesPost(ref chatId, messageCreate);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/chat/chats/{chat_id}/messages");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bchat_id%7D", Uri.EscapeDataString(chatId.ToString()));

                    httpRequestMessageLocalVar.Content = (messageCreate as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(messageCreate, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateMessageApiV1ChatChatsChatIdMessagesPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateMessageApiV1ChatChatsChatIdMessagesPostApiResponse>();

                        CreateMessageApiV1ChatChatsChatIdMessagesPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/chat/chats/{chat_id}/messages", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateMessageApiV1ChatChatsChatIdMessagesPostDefaultImplementation(apiResponseLocalVar, chatId, messageCreate);

                        Events.ExecuteOnCreateMessageApiV1ChatChatsChatIdMessagesPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateMessageApiV1ChatChatsChatIdMessagesPostDefaultImplementation(e, "/api/v1/chat/chats/{chat_id}/messages", uriBuilderLocalVar.Path, chatId, messageCreate);
                Events.ExecuteOnErrorCreateMessageApiV1ChatChatsChatIdMessagesPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateMessageApiV1ChatChatsChatIdMessagesPostApiResponse"/>
        /// </summary>
        public partial class CreateMessageApiV1ChatChatsChatIdMessagesPostApiResponse : XperiencesAI.SDK.Client.ApiResponse, ICreateMessageApiV1ChatChatsChatIdMessagesPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateMessageApiV1ChatChatsChatIdMessagesPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateMessageApiV1ChatChatsChatIdMessagesPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateMessageApiV1ChatChatsChatIdMessagesPostApiResponse(ILogger<CreateMessageApiV1ChatChatsChatIdMessagesPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public XperiencesAI.SDK.Model.MessageResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<XperiencesAI.SDK.Model.MessageResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out XperiencesAI.SDK.Model.MessageResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public XperiencesAI.SDK.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<XperiencesAI.SDK.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out XperiencesAI.SDK.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetChatApiV1ChatChatsChatIdGet(ref string chatId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="chatId"></param>
        /// <returns></returns>
        private void ValidateGetChatApiV1ChatChatsChatIdGet(string chatId)
        {
            if (chatId == null)
                throw new ArgumentNullException(nameof(chatId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="chatId"></param>
        private void AfterGetChatApiV1ChatChatsChatIdGetDefaultImplementation(IGetChatApiV1ChatChatsChatIdGetApiResponse apiResponseLocalVar, string chatId)
        {
            bool suppressDefaultLog = false;
            AfterGetChatApiV1ChatChatsChatIdGet(ref suppressDefaultLog, apiResponseLocalVar, chatId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="chatId"></param>
        partial void AfterGetChatApiV1ChatChatsChatIdGet(ref bool suppressDefaultLog, IGetChatApiV1ChatChatsChatIdGetApiResponse apiResponseLocalVar, string chatId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="chatId"></param>
        private void OnErrorGetChatApiV1ChatChatsChatIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string chatId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetChatApiV1ChatChatsChatIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, chatId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="chatId"></param>
        partial void OnErrorGetChatApiV1ChatChatsChatIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string chatId);

        /// <summary>
        /// Get Chat Get a chat by ID.
        /// </summary>
        /// <param name="chatId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChatApiV1ChatChatsChatIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetChatApiV1ChatChatsChatIdGetApiResponse?> GetChatApiV1ChatChatsChatIdGetOrDefaultAsync(string chatId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetChatApiV1ChatChatsChatIdGetAsync(chatId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Chat Get a chat by ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChatApiV1ChatChatsChatIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetChatApiV1ChatChatsChatIdGetApiResponse> GetChatApiV1ChatChatsChatIdGetAsync(string chatId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetChatApiV1ChatChatsChatIdGet(chatId);

                FormatGetChatApiV1ChatChatsChatIdGet(ref chatId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/chat/chats/{chat_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bchat_id%7D", Uri.EscapeDataString(chatId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetChatApiV1ChatChatsChatIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetChatApiV1ChatChatsChatIdGetApiResponse>();

                        GetChatApiV1ChatChatsChatIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/chat/chats/{chat_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetChatApiV1ChatChatsChatIdGetDefaultImplementation(apiResponseLocalVar, chatId);

                        Events.ExecuteOnGetChatApiV1ChatChatsChatIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetChatApiV1ChatChatsChatIdGetDefaultImplementation(e, "/api/v1/chat/chats/{chat_id}", uriBuilderLocalVar.Path, chatId);
                Events.ExecuteOnErrorGetChatApiV1ChatChatsChatIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetChatApiV1ChatChatsChatIdGetApiResponse"/>
        /// </summary>
        public partial class GetChatApiV1ChatChatsChatIdGetApiResponse : XperiencesAI.SDK.Client.ApiResponse, IGetChatApiV1ChatChatsChatIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetChatApiV1ChatChatsChatIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetChatApiV1ChatChatsChatIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetChatApiV1ChatChatsChatIdGetApiResponse(ILogger<GetChatApiV1ChatChatsChatIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public XperiencesAI.SDK.Model.ConversationResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<XperiencesAI.SDK.Model.ConversationResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out XperiencesAI.SDK.Model.ConversationResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public XperiencesAI.SDK.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<XperiencesAI.SDK.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out XperiencesAI.SDK.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
