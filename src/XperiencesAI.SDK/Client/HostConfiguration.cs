/*
 * Xperiences API
 *
 * API for VR mentoring experiences
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@xperiences.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Net.Http;
using Microsoft.Extensions.DependencyInjection;
using XperiencesAI.SDK.Api;
using XperiencesAI.SDK.Model;

namespace XperiencesAI.SDK.Client
{
    /// <summary>
    /// Provides hosting configuration for XperiencesAI.SDK
    /// </summary>
    public class HostConfiguration
    {
        private readonly IServiceCollection _services;
        private readonly JsonSerializerOptions _jsonOptions = new JsonSerializerOptions();

        internal bool HttpClientsAdded { get; private set; }

        /// <summary>
        /// Instantiates the class 
        /// </summary>
        /// <param name="services"></param>
        public HostConfiguration(IServiceCollection services)
        {
            _services = services;
            _jsonOptions.Converters.Add(new JsonStringEnumConverter());
            _jsonOptions.Converters.Add(new DateTimeJsonConverter());
            _jsonOptions.Converters.Add(new DateTimeNullableJsonConverter());
            _jsonOptions.Converters.Add(new DateOnlyJsonConverter());
            _jsonOptions.Converters.Add(new DateOnlyNullableJsonConverter());
            _jsonOptions.Converters.Add(new AgentJsonConverter());
            _jsonOptions.Converters.Add(new AgentCreateJsonConverter());
            _jsonOptions.Converters.Add(new AgentResponseJsonConverter());
            _jsonOptions.Converters.Add(new AgentStatusJsonConverter());
            _jsonOptions.Converters.Add(new AgentStatusNullableJsonConverter());
            _jsonOptions.Converters.Add(new AgentUpdateJsonConverter());
            _jsonOptions.Converters.Add(new ConversationJsonConverter());
            _jsonOptions.Converters.Add(new ConversationCreateJsonConverter());
            _jsonOptions.Converters.Add(new ConversationResponseJsonConverter());
            _jsonOptions.Converters.Add(new HTTPValidationErrorJsonConverter());
            _jsonOptions.Converters.Add(new MessageJsonConverter());
            _jsonOptions.Converters.Add(new MessageCreateJsonConverter());
            _jsonOptions.Converters.Add(new MessageResponseJsonConverter());
            _jsonOptions.Converters.Add(new MessageRoleJsonConverter());
            _jsonOptions.Converters.Add(new MessageRoleNullableJsonConverter());
            _jsonOptions.Converters.Add(new TextRequestJsonConverter());
            _jsonOptions.Converters.Add(new TextResponseJsonConverter());
            _jsonOptions.Converters.Add(new UserCreateJsonConverter());
            _jsonOptions.Converters.Add(new UserResponseJsonConverter());
            _jsonOptions.Converters.Add(new UserUpdateJsonConverter());
            _jsonOptions.Converters.Add(new ValidationErrorJsonConverter());
            _jsonOptions.Converters.Add(new ValidationErrorLocInnerJsonConverter());
            JsonSerializerOptionsProvider jsonSerializerOptionsProvider = new(_jsonOptions);
            _services.AddSingleton(jsonSerializerOptionsProvider);
            _services.AddSingleton<IApiFactory, ApiFactory>();
            _services.AddSingleton<AgentsApiEvents>();
            _services.AddTransient<IAgentsApi, AgentsApi>();
            _services.AddSingleton<ChatApiEvents>();
            _services.AddTransient<IChatApi, ChatApi>();
            _services.AddSingleton<HealthApiEvents>();
            _services.AddTransient<IHealthApi, HealthApi>();
            _services.AddSingleton<UsersApiEvents>();
            _services.AddTransient<IUsersApi, UsersApi>();
        }

        /// <summary>
        /// Configures the HttpClients.
        /// </summary>
        /// <param name="client"></param>
        /// <param name="builder"></param>
        /// <returns></returns>
        public HostConfiguration AddApiHttpClients
        (
            Action<HttpClient>? client = null, Action<IHttpClientBuilder>? builder = null)
        {
            if (client == null)
                client = c => c.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS);

            List<IHttpClientBuilder> builders = new List<IHttpClientBuilder>();

            builders.Add(_services.AddHttpClient<IAgentsApi, AgentsApi>(client));
            builders.Add(_services.AddHttpClient<IChatApi, ChatApi>(client));
            builders.Add(_services.AddHttpClient<IHealthApi, HealthApi>(client));
            builders.Add(_services.AddHttpClient<IUsersApi, UsersApi>(client));
            
            if (builder != null)
                foreach (IHttpClientBuilder instance in builders)
                    builder(instance);

            HttpClientsAdded = true;

            return this;
        }

        /// <summary>
        /// Configures the JsonSerializerSettings
        /// </summary>
        /// <param name="options"></param>
        /// <returns></returns>
        public HostConfiguration ConfigureJsonOptions(Action<JsonSerializerOptions> options)
        {
            options(_jsonOptions);

            return this;
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="token"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(TTokenBase token) where TTokenBase : TokenBase
        {
            return AddTokens(new TTokenBase[]{ token });
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="tokens"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(IEnumerable<TTokenBase> tokens) where TTokenBase : TokenBase
        {
            TokenContainer<TTokenBase> container = new TokenContainer<TTokenBase>(tokens);
            _services.AddSingleton(services => container);

            return this;
        }

        /// <summary>
        /// Adds a token provider to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenProvider"></typeparam>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <returns></returns>
        public HostConfiguration UseProvider<TTokenProvider, TTokenBase>() 
            where TTokenProvider : TokenProvider<TTokenBase>
            where TTokenBase : TokenBase
        {
            _services.AddSingleton<TTokenProvider>();
            _services.AddSingleton<TokenProvider<TTokenBase>>(services => services.GetRequiredService<TTokenProvider>());

            return this;
        }
    }
}
