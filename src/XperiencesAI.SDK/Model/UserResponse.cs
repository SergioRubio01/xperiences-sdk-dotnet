// <auto-generated>
/*
 * Xperiences API
 *
 * API for VR mentoring experiences
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@xperiences.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using XperiencesAI.SDK.Client;

namespace XperiencesAI.SDK.Model
{
    /// <summary>
    /// Schema for user response.
    /// </summary>
    public partial class UserResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserResponse" /> class.
        /// </summary>
        /// <param name="email">User&#39;s email address</param>
        /// <param name="fullName">User&#39;s full name</param>
        /// <param name="id">User&#39;s unique identifier</param>
        /// <param name="createdAt">When the user was created</param>
        /// <param name="updatedAt">When the user was last updated</param>
        /// <param name="isActive">Whether the user is active (default to true)</param>
        /// <param name="isSuperuser">Whether the user is a superuser (default to false)</param>
        [JsonConstructor]
        public UserResponse(string email, string fullName, string id, DateTime createdAt, DateTime updatedAt, Option<bool?> isActive = default, Option<bool?> isSuperuser = default)
        {
            Email = email;
            FullName = fullName;
            Id = id;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            IsActiveOption = isActive;
            IsSuperuserOption = isSuperuser;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// User&#39;s email address
        /// </summary>
        /// <value>User&#39;s email address</value>
        [JsonPropertyName("email")]
        public string Email { get; set; }

        /// <summary>
        /// User&#39;s full name
        /// </summary>
        /// <value>User&#39;s full name</value>
        [JsonPropertyName("full_name")]
        public string FullName { get; set; }

        /// <summary>
        /// User&#39;s unique identifier
        /// </summary>
        /// <value>User&#39;s unique identifier</value>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// When the user was created
        /// </summary>
        /// <value>When the user was created</value>
        [JsonPropertyName("created_at")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// When the user was last updated
        /// </summary>
        /// <value>When the user was last updated</value>
        [JsonPropertyName("updated_at")]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Used to track the state of IsActive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsActiveOption { get; private set; }

        /// <summary>
        /// Whether the user is active
        /// </summary>
        /// <value>Whether the user is active</value>
        [JsonPropertyName("is_active")]
        public bool? IsActive { get { return this.IsActiveOption; } set { this.IsActiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsSuperuser
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsSuperuserOption { get; private set; }

        /// <summary>
        /// Whether the user is a superuser
        /// </summary>
        /// <value>Whether the user is a superuser</value>
        [JsonPropertyName("is_superuser")]
        public bool? IsSuperuser { get { return this.IsSuperuserOption; } set { this.IsSuperuserOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserResponse {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsSuperuser: ").Append(IsSuperuser).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserResponse" />
    /// </summary>
    public class UserResponseJsonConverter : JsonConverter<UserResponse>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="UserResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UserResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> email = default;
            Option<string?> fullName = default;
            Option<string?> id = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;
            Option<bool?> isActive = default;
            Option<bool?> isSuperuser = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "full_name":
                            fullName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "created_at":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updated_at":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "is_active":
                            isActive = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_superuser":
                            isSuperuser = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!email.IsSet)
                throw new ArgumentException("Property is required for class UserResponse.", nameof(email));

            if (!fullName.IsSet)
                throw new ArgumentException("Property is required for class UserResponse.", nameof(fullName));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class UserResponse.", nameof(id));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class UserResponse.", nameof(createdAt));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class UserResponse.", nameof(updatedAt));

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class UserResponse.");

            if (fullName.IsSet && fullName.Value == null)
                throw new ArgumentNullException(nameof(fullName), "Property is not nullable for class UserResponse.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class UserResponse.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class UserResponse.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class UserResponse.");

            if (isActive.IsSet && isActive.Value == null)
                throw new ArgumentNullException(nameof(isActive), "Property is not nullable for class UserResponse.");

            if (isSuperuser.IsSet && isSuperuser.Value == null)
                throw new ArgumentNullException(nameof(isSuperuser), "Property is not nullable for class UserResponse.");

            return new UserResponse(email.Value!, fullName.Value!, id.Value!, createdAt.Value!.Value!, updatedAt.Value!.Value!, isActive, isSuperuser);
        }

        /// <summary>
        /// Serializes a <see cref="UserResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UserResponse userResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, userResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UserResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UserResponse userResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (userResponse.Email == null)
                throw new ArgumentNullException(nameof(userResponse.Email), "Property is required for class UserResponse.");

            if (userResponse.FullName == null)
                throw new ArgumentNullException(nameof(userResponse.FullName), "Property is required for class UserResponse.");

            if (userResponse.Id == null)
                throw new ArgumentNullException(nameof(userResponse.Id), "Property is required for class UserResponse.");

            writer.WriteString("email", userResponse.Email);

            writer.WriteString("full_name", userResponse.FullName);

            writer.WriteString("id", userResponse.Id);

            writer.WriteString("created_at", userResponse.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("updated_at", userResponse.UpdatedAt.ToString(UpdatedAtFormat));

            if (userResponse.IsActiveOption.IsSet)
                writer.WriteBoolean("is_active", userResponse.IsActiveOption.Value!.Value);

            if (userResponse.IsSuperuserOption.IsSet)
                writer.WriteBoolean("is_superuser", userResponse.IsSuperuserOption.Value!.Value);
        }
    }
}
