// <auto-generated>
/*
 * Xperiences API
 *
 * API for VR mentoring experiences
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@xperiences.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using XperiencesAI.SDK.Client;

namespace XperiencesAI.SDK.Model
{
    /// <summary>
    /// Response schema for message operations (like speech-to-text or text-to-speech). Used specifically for audio/text conversion responses.
    /// </summary>
    public partial class MessageResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageResponse" /> class.
        /// </summary>
        /// <param name="text">Text response from the agent</param>
        /// <param name="audioUrl">audioUrl</param>
        [JsonConstructor]
        public MessageResponse(string text, Option<string?> audioUrl = default)
        {
            Text = text;
            AudioUrlOption = audioUrl;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Text response from the agent
        /// </summary>
        /// <value>Text response from the agent</value>
        [JsonPropertyName("text")]
        public string Text { get; set; }

        /// <summary>
        /// Used to track the state of AudioUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AudioUrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets AudioUrl
        /// </summary>
        [JsonPropertyName("audio_url")]
        public string? AudioUrl { get { return this.AudioUrlOption; } set { this.AudioUrlOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MessageResponse {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  AudioUrl: ").Append(AudioUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MessageResponse" />
    /// </summary>
    public class MessageResponseJsonConverter : JsonConverter<MessageResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="MessageResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MessageResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> text = default;
            Option<string?> audioUrl = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "text":
                            text = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "audio_url":
                            audioUrl = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!text.IsSet)
                throw new ArgumentException("Property is required for class MessageResponse.", nameof(text));

            if (text.IsSet && text.Value == null)
                throw new ArgumentNullException(nameof(text), "Property is not nullable for class MessageResponse.");

            return new MessageResponse(text.Value!, audioUrl);
        }

        /// <summary>
        /// Serializes a <see cref="MessageResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="messageResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MessageResponse messageResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, messageResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MessageResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="messageResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MessageResponse messageResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (messageResponse.Text == null)
                throw new ArgumentNullException(nameof(messageResponse.Text), "Property is required for class MessageResponse.");

            writer.WriteString("text", messageResponse.Text);

            if (messageResponse.AudioUrlOption.IsSet)
                if (messageResponse.AudioUrlOption.Value != null)
                    writer.WriteString("audio_url", messageResponse.AudioUrl);
                else
                    writer.WriteNull("audio_url");
        }
    }
}
