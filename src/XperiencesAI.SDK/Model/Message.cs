// <auto-generated>
/*
 * Xperiences API
 *
 * API for VR mentoring experiences
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@xperiences.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using XperiencesAI.SDK.Client;

namespace XperiencesAI.SDK.Model
{
    /// <summary>
    /// Schema for message response.
    /// </summary>
    public partial class Message : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Message" /> class.
        /// </summary>
        /// <param name="role">Role of the message sender</param>
        /// <param name="content">Content of the message</param>
        /// <param name="id">Unique identifier for the message</param>
        /// <param name="conversationId">ID of the conversation this message belongs to</param>
        /// <param name="createdAt">Creation timestamp</param>
        /// <param name="metaData">Additional meta_data for the message</param>
        [JsonConstructor]
        public Message(MessageRole role, string content, string id, string conversationId, DateTime createdAt, Option<Dictionary<string, Object>?> metaData = default)
        {
            Role = role;
            Content = content;
            Id = id;
            ConversationId = conversationId;
            CreatedAt = createdAt;
            MetaDataOption = metaData;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Role of the message sender
        /// </summary>
        /// <value>Role of the message sender</value>
        [JsonPropertyName("role")]
        public MessageRole Role { get; set; }

        /// <summary>
        /// Content of the message
        /// </summary>
        /// <value>Content of the message</value>
        [JsonPropertyName("content")]
        public string Content { get; set; }

        /// <summary>
        /// Unique identifier for the message
        /// </summary>
        /// <value>Unique identifier for the message</value>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// ID of the conversation this message belongs to
        /// </summary>
        /// <value>ID of the conversation this message belongs to</value>
        [JsonPropertyName("conversation_id")]
        public string ConversationId { get; set; }

        /// <summary>
        /// Creation timestamp
        /// </summary>
        /// <value>Creation timestamp</value>
        [JsonPropertyName("created_at")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Used to track the state of MetaData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> MetaDataOption { get; private set; }

        /// <summary>
        /// Additional meta_data for the message
        /// </summary>
        /// <value>Additional meta_data for the message</value>
        [JsonPropertyName("meta_data")]
        public Dictionary<string, Object>? MetaData { get { return this.MetaDataOption; } set { this.MetaDataOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Message {\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ConversationId: ").Append(ConversationId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  MetaData: ").Append(MetaData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Message" />
    /// </summary>
    public class MessageJsonConverter : JsonConverter<Message>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="Message" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Message Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<MessageRole?> role = default;
            Option<string?> content = default;
            Option<string?> id = default;
            Option<string?> conversationId = default;
            Option<DateTime?> createdAt = default;
            Option<Dictionary<string, Object>?> metaData = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "role":
                            string? roleRawValue = utf8JsonReader.GetString();
                            if (roleRawValue != null)
                                role = new Option<MessageRole?>(MessageRoleValueConverter.FromStringOrDefault(roleRawValue));
                            break;
                        case "content":
                            content = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "conversation_id":
                            conversationId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "created_at":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "meta_data":
                            metaData = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!role.IsSet)
                throw new ArgumentException("Property is required for class Message.", nameof(role));

            if (!content.IsSet)
                throw new ArgumentException("Property is required for class Message.", nameof(content));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Message.", nameof(id));

            if (!conversationId.IsSet)
                throw new ArgumentException("Property is required for class Message.", nameof(conversationId));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class Message.", nameof(createdAt));

            if (role.IsSet && role.Value == null)
                throw new ArgumentNullException(nameof(role), "Property is not nullable for class Message.");

            if (content.IsSet && content.Value == null)
                throw new ArgumentNullException(nameof(content), "Property is not nullable for class Message.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Message.");

            if (conversationId.IsSet && conversationId.Value == null)
                throw new ArgumentNullException(nameof(conversationId), "Property is not nullable for class Message.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class Message.");

            if (metaData.IsSet && metaData.Value == null)
                throw new ArgumentNullException(nameof(metaData), "Property is not nullable for class Message.");

            return new Message(role.Value!.Value!, content.Value!, id.Value!, conversationId.Value!, createdAt.Value!.Value!, metaData);
        }

        /// <summary>
        /// Serializes a <see cref="Message" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="message"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Message message, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, message, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Message" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="message"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Message message, JsonSerializerOptions jsonSerializerOptions)
        {
            if (message.Content == null)
                throw new ArgumentNullException(nameof(message.Content), "Property is required for class Message.");

            if (message.Id == null)
                throw new ArgumentNullException(nameof(message.Id), "Property is required for class Message.");

            if (message.ConversationId == null)
                throw new ArgumentNullException(nameof(message.ConversationId), "Property is required for class Message.");

            if (message.MetaDataOption.IsSet && message.MetaData == null)
                throw new ArgumentNullException(nameof(message.MetaData), "Property is required for class Message.");

            var roleRawValue = MessageRoleValueConverter.ToJsonValue(message.Role);
            writer.WriteString("role", roleRawValue);

            writer.WriteString("content", message.Content);

            writer.WriteString("id", message.Id);

            writer.WriteString("conversation_id", message.ConversationId);

            writer.WriteString("created_at", message.CreatedAt.ToString(CreatedAtFormat));

            if (message.MetaDataOption.IsSet)
            {
                writer.WritePropertyName("meta_data");
                JsonSerializer.Serialize(writer, message.MetaData, jsonSerializerOptions);
            }
        }
    }
}
