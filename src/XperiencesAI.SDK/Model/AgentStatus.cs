// <auto-generated>
/*
 * Xperiences API
 *
 * API for VR mentoring experiences
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@xperiences.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using XperiencesAI.SDK.Client;

namespace XperiencesAI.SDK.Model
{
    /// <summary>
    /// Enum for agent status.
    /// </summary>
    /// <value>Enum for agent status.</value>
    public enum AgentStatus
    {
        /// <summary>
        /// Enum Initializing for value: initializing
        /// </summary>
        Initializing = 1,

        /// <summary>
        /// Enum Active for value: active
        /// </summary>
        Active = 2,

        /// <summary>
        /// Enum Inactive for value: inactive
        /// </summary>
        Inactive = 3,

        /// <summary>
        /// Enum Error for value: error
        /// </summary>
        Error = 4
    }

    /// <summary>
    /// Converts <see cref="AgentStatus"/> to and from the JSON value
    /// </summary>
    public static class AgentStatusValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="AgentStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AgentStatus FromString(string value)
        {
            if (value.Equals("initializing"))
                return AgentStatus.Initializing;

            if (value.Equals("active"))
                return AgentStatus.Active;

            if (value.Equals("inactive"))
                return AgentStatus.Inactive;

            if (value.Equals("error"))
                return AgentStatus.Error;

            throw new NotImplementedException($"Could not convert value to type AgentStatus: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="AgentStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AgentStatus? FromStringOrDefault(string value)
        {
            if (value.Equals("initializing"))
                return AgentStatus.Initializing;

            if (value.Equals("active"))
                return AgentStatus.Active;

            if (value.Equals("inactive"))
                return AgentStatus.Inactive;

            if (value.Equals("error"))
                return AgentStatus.Error;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AgentStatus"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(AgentStatus value)
        {
            if (value == AgentStatus.Initializing)
                return "initializing";

            if (value == AgentStatus.Active)
                return "active";

            if (value == AgentStatus.Inactive)
                return "inactive";

            if (value == AgentStatus.Error)
                return "error";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AgentStatus"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class AgentStatusJsonConverter : JsonConverter<AgentStatus>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override AgentStatus Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            AgentStatus? result = rawValue == null
                ? null
                : AgentStatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the AgentStatus to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="agentStatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, AgentStatus agentStatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(agentStatus.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AgentStatus"/>
    /// </summary>
    public class AgentStatusNullableJsonConverter : JsonConverter<AgentStatus?>
    {
        /// <summary>
        /// Returns a AgentStatus from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override AgentStatus? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            AgentStatus? result = rawValue == null
                ? null
                : AgentStatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="agentStatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, AgentStatus? agentStatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(agentStatus?.ToString() ?? "null");
        }
    }
}
