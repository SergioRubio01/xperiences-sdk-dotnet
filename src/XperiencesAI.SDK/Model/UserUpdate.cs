// <auto-generated>
/*
 * Xperiences API
 *
 * API for VR mentoring experiences
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@xperiences.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using XperiencesAI.SDK.Client;

namespace XperiencesAI.SDK.Model
{
    /// <summary>
    /// Schema for updating a user.
    /// </summary>
    public partial class UserUpdate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserUpdate" /> class.
        /// </summary>
        /// <param name="email">email</param>
        /// <param name="fullName">fullName</param>
        /// <param name="password">password</param>
        /// <param name="isActive">isActive</param>
        /// <param name="isSuperuser">isSuperuser</param>
        [JsonConstructor]
        public UserUpdate(Option<string?> email = default, Option<string?> fullName = default, Option<string?> password = default, Option<bool?> isActive = default, Option<bool?> isSuperuser = default)
        {
            EmailOption = email;
            FullNameOption = fullName;
            PasswordOption = password;
            IsActiveOption = isActive;
            IsSuperuserOption = isSuperuser;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailOption { get; private set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [JsonPropertyName("email")]
        public string? Email { get { return this.EmailOption; } set { this.EmailOption = new(value); } }

        /// <summary>
        /// Used to track the state of FullName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FullNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [JsonPropertyName("full_name")]
        public string? FullName { get { return this.FullNameOption; } set { this.FullNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Password
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PasswordOption { get; private set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [JsonPropertyName("password")]
        public string? Password { get { return this.PasswordOption; } set { this.PasswordOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsActive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsActiveOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [JsonPropertyName("is_active")]
        public bool? IsActive { get { return this.IsActiveOption; } set { this.IsActiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsSuperuser
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsSuperuserOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsSuperuser
        /// </summary>
        [JsonPropertyName("is_superuser")]
        public bool? IsSuperuser { get { return this.IsSuperuserOption; } set { this.IsSuperuserOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserUpdate {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsSuperuser: ").Append(IsSuperuser).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Password (string) minLength
            if (this.Password != null && this.Password.Length < 8)
            {
                yield return new ValidationResult("Invalid value for Password, length must be greater than 8.", new [] { "Password" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserUpdate" />
    /// </summary>
    public class UserUpdateJsonConverter : JsonConverter<UserUpdate>
    {
        /// <summary>
        /// Deserializes json to <see cref="UserUpdate" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UserUpdate Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> email = default;
            Option<string?> fullName = default;
            Option<string?> password = default;
            Option<bool?> isActive = default;
            Option<bool?> isSuperuser = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "full_name":
                            fullName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "password":
                            password = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "is_active":
                            isActive = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_superuser":
                            isSuperuser = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new UserUpdate(email, fullName, password, isActive, isSuperuser);
        }

        /// <summary>
        /// Serializes a <see cref="UserUpdate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userUpdate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UserUpdate userUpdate, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, userUpdate, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UserUpdate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userUpdate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UserUpdate userUpdate, JsonSerializerOptions jsonSerializerOptions)
        {
            if (userUpdate.EmailOption.IsSet)
                if (userUpdate.EmailOption.Value != null)
                    writer.WriteString("email", userUpdate.Email);
                else
                    writer.WriteNull("email");

            if (userUpdate.FullNameOption.IsSet)
                if (userUpdate.FullNameOption.Value != null)
                    writer.WriteString("full_name", userUpdate.FullName);
                else
                    writer.WriteNull("full_name");

            if (userUpdate.PasswordOption.IsSet)
                if (userUpdate.PasswordOption.Value != null)
                    writer.WriteString("password", userUpdate.Password);
                else
                    writer.WriteNull("password");

            if (userUpdate.IsActiveOption.IsSet)
                if (userUpdate.IsActiveOption.Value != null)
                    writer.WriteBoolean("is_active", userUpdate.IsActiveOption.Value!.Value);
                else
                    writer.WriteNull("is_active");

            if (userUpdate.IsSuperuserOption.IsSet)
                if (userUpdate.IsSuperuserOption.Value != null)
                    writer.WriteBoolean("is_superuser", userUpdate.IsSuperuserOption.Value!.Value);
                else
                    writer.WriteNull("is_superuser");
        }
    }
}
