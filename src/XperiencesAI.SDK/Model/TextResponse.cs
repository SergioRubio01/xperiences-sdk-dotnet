// <auto-generated>
/*
 * Xperiences API
 *
 * API for VR mentoring experiences
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@xperiences.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using XperiencesAI.SDK.Client;

namespace XperiencesAI.SDK.Model
{
    /// <summary>
    /// Schema for text processing response.
    /// </summary>
    public partial class TextResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TextResponse" /> class.
        /// </summary>
        /// <param name="messageId">ID of the created message</param>
        /// <param name="text">Text response from the agent</param>
        /// <param name="metaData">Additional meta_data for the response</param>
        [JsonConstructor]
        public TextResponse(string messageId, string text, Dictionary<string, Object> metaData)
        {
            MessageId = messageId;
            Text = text;
            MetaData = metaData;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// ID of the created message
        /// </summary>
        /// <value>ID of the created message</value>
        [JsonPropertyName("message_id")]
        public string MessageId { get; set; }

        /// <summary>
        /// Text response from the agent
        /// </summary>
        /// <value>Text response from the agent</value>
        [JsonPropertyName("text")]
        public string Text { get; set; }

        /// <summary>
        /// Additional meta_data for the response
        /// </summary>
        /// <value>Additional meta_data for the response</value>
        [JsonPropertyName("meta_data")]
        public Dictionary<string, Object> MetaData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TextResponse {\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  MetaData: ").Append(MetaData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TextResponse" />
    /// </summary>
    public class TextResponseJsonConverter : JsonConverter<TextResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="TextResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TextResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> messageId = default;
            Option<string?> text = default;
            Option<Dictionary<string, Object>?> metaData = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "message_id":
                            messageId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "text":
                            text = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "meta_data":
                            metaData = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!messageId.IsSet)
                throw new ArgumentException("Property is required for class TextResponse.", nameof(messageId));

            if (!text.IsSet)
                throw new ArgumentException("Property is required for class TextResponse.", nameof(text));

            if (!metaData.IsSet)
                throw new ArgumentException("Property is required for class TextResponse.", nameof(metaData));

            if (messageId.IsSet && messageId.Value == null)
                throw new ArgumentNullException(nameof(messageId), "Property is not nullable for class TextResponse.");

            if (text.IsSet && text.Value == null)
                throw new ArgumentNullException(nameof(text), "Property is not nullable for class TextResponse.");

            if (metaData.IsSet && metaData.Value == null)
                throw new ArgumentNullException(nameof(metaData), "Property is not nullable for class TextResponse.");

            return new TextResponse(messageId.Value!, text.Value!, metaData.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="TextResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="textResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TextResponse textResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, textResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TextResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="textResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TextResponse textResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (textResponse.MessageId == null)
                throw new ArgumentNullException(nameof(textResponse.MessageId), "Property is required for class TextResponse.");

            if (textResponse.Text == null)
                throw new ArgumentNullException(nameof(textResponse.Text), "Property is required for class TextResponse.");

            if (textResponse.MetaData == null)
                throw new ArgumentNullException(nameof(textResponse.MetaData), "Property is required for class TextResponse.");

            writer.WriteString("message_id", textResponse.MessageId);

            writer.WriteString("text", textResponse.Text);

            writer.WritePropertyName("meta_data");
            JsonSerializer.Serialize(writer, textResponse.MetaData, jsonSerializerOptions);
        }
    }
}
