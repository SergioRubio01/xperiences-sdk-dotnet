// <auto-generated>
/*
 * Xperiences API
 *
 * API for VR mentoring experiences
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@xperiences.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using XperiencesAI.SDK.Client;

namespace XperiencesAI.SDK.Model
{
    /// <summary>
    /// Schema for creating a new agent.
    /// </summary>
    public partial class AgentCreate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AgentCreate" /> class.
        /// </summary>
        /// <param name="name">Name of the agent</param>
        /// <param name="description">description</param>
        /// <param name="promptTemplate">promptTemplate</param>
        /// <param name="varConfiguration">Additional configuration for the agent</param>
        [JsonConstructor]
        public AgentCreate(string name, Option<string?> description = default, Option<string?> promptTemplate = default, Option<Dictionary<string, Object>?> varConfiguration = default)
        {
            Name = name;
            DescriptionOption = description;
            PromptTemplateOption = promptTemplate;
            VarConfigurationOption = varConfiguration;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Name of the agent
        /// </summary>
        /// <value>Name of the agent</value>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of PromptTemplate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PromptTemplateOption { get; private set; }

        /// <summary>
        /// Gets or Sets PromptTemplate
        /// </summary>
        [JsonPropertyName("prompt_template")]
        public string? PromptTemplate { get { return this.PromptTemplateOption; } set { this.PromptTemplateOption = new(value); } }

        /// <summary>
        /// Used to track the state of VarConfiguration
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> VarConfigurationOption { get; private set; }

        /// <summary>
        /// Additional configuration for the agent
        /// </summary>
        /// <value>Additional configuration for the agent</value>
        [JsonPropertyName("configuration")]
        public Dictionary<string, Object>? VarConfiguration { get { return this.VarConfigurationOption; } set { this.VarConfigurationOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AgentCreate {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  PromptTemplate: ").Append(PromptTemplate).Append("\n");
            sb.Append("  VarConfiguration: ").Append(VarConfiguration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AgentCreate" />
    /// </summary>
    public class AgentCreateJsonConverter : JsonConverter<AgentCreate>
    {
        /// <summary>
        /// Deserializes json to <see cref="AgentCreate" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AgentCreate Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> description = default;
            Option<string?> promptTemplate = default;
            Option<Dictionary<string, Object>?> varConfiguration = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "prompt_template":
                            promptTemplate = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "configuration":
                            varConfiguration = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class AgentCreate.", nameof(name));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class AgentCreate.");

            if (varConfiguration.IsSet && varConfiguration.Value == null)
                throw new ArgumentNullException(nameof(varConfiguration), "Property is not nullable for class AgentCreate.");

            return new AgentCreate(name.Value!, description, promptTemplate, varConfiguration);
        }

        /// <summary>
        /// Serializes a <see cref="AgentCreate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="agentCreate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AgentCreate agentCreate, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, agentCreate, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AgentCreate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="agentCreate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AgentCreate agentCreate, JsonSerializerOptions jsonSerializerOptions)
        {
            if (agentCreate.Name == null)
                throw new ArgumentNullException(nameof(agentCreate.Name), "Property is required for class AgentCreate.");

            if (agentCreate.VarConfigurationOption.IsSet && agentCreate.VarConfiguration == null)
                throw new ArgumentNullException(nameof(agentCreate.VarConfiguration), "Property is required for class AgentCreate.");

            writer.WriteString("name", agentCreate.Name);

            if (agentCreate.DescriptionOption.IsSet)
                if (agentCreate.DescriptionOption.Value != null)
                    writer.WriteString("description", agentCreate.Description);
                else
                    writer.WriteNull("description");

            if (agentCreate.PromptTemplateOption.IsSet)
                if (agentCreate.PromptTemplateOption.Value != null)
                    writer.WriteString("prompt_template", agentCreate.PromptTemplate);
                else
                    writer.WriteNull("prompt_template");

            if (agentCreate.VarConfigurationOption.IsSet)
            {
                writer.WritePropertyName("configuration");
                JsonSerializer.Serialize(writer, agentCreate.VarConfiguration, jsonSerializerOptions);
            }
        }
    }
}
