// <auto-generated>
/*
 * Xperiences API
 *
 * API for VR mentoring experiences
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@xperiences.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using XperiencesAI.SDK.Client;

namespace XperiencesAI.SDK.Model
{
    /// <summary>
    /// Schema for conversation response.
    /// </summary>
    public partial class Conversation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Conversation" /> class.
        /// </summary>
        /// <param name="id">Unique identifier for the conversation</param>
        /// <param name="agentId">ID of the agent this conversation belongs to</param>
        /// <param name="isActive">Whether the conversation is active</param>
        /// <param name="createdAt">Creation timestamp</param>
        /// <param name="updatedAt">Last update timestamp</param>
        /// <param name="title">title</param>
        /// <param name="metaData">Additional meta_data for the conversation</param>
        /// <param name="threadId">threadId</param>
        [JsonConstructor]
        public Conversation(string id, string agentId, bool isActive, DateTime createdAt, DateTime updatedAt, Option<string?> title = default, Option<Dictionary<string, Object>?> metaData = default, Option<string?> threadId = default)
        {
            Id = id;
            AgentId = agentId;
            IsActive = isActive;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            TitleOption = title;
            MetaDataOption = metaData;
            ThreadIdOption = threadId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Unique identifier for the conversation
        /// </summary>
        /// <value>Unique identifier for the conversation</value>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// ID of the agent this conversation belongs to
        /// </summary>
        /// <value>ID of the agent this conversation belongs to</value>
        [JsonPropertyName("agent_id")]
        public string AgentId { get; set; }

        /// <summary>
        /// Whether the conversation is active
        /// </summary>
        /// <value>Whether the conversation is active</value>
        [JsonPropertyName("is_active")]
        public bool IsActive { get; set; }

        /// <summary>
        /// Creation timestamp
        /// </summary>
        /// <value>Creation timestamp</value>
        [JsonPropertyName("created_at")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Last update timestamp
        /// </summary>
        /// <value>Last update timestamp</value>
        [JsonPropertyName("updated_at")]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of MetaData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> MetaDataOption { get; private set; }

        /// <summary>
        /// Additional meta_data for the conversation
        /// </summary>
        /// <value>Additional meta_data for the conversation</value>
        [JsonPropertyName("meta_data")]
        public Dictionary<string, Object>? MetaData { get { return this.MetaDataOption; } set { this.MetaDataOption = new(value); } }

        /// <summary>
        /// Used to track the state of ThreadId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ThreadIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ThreadId
        /// </summary>
        [JsonPropertyName("thread_id")]
        public string? ThreadId { get { return this.ThreadIdOption; } set { this.ThreadIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Conversation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AgentId: ").Append(AgentId).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  MetaData: ").Append(MetaData).Append("\n");
            sb.Append("  ThreadId: ").Append(ThreadId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Conversation" />
    /// </summary>
    public class ConversationJsonConverter : JsonConverter<Conversation>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="Conversation" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Conversation Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> agentId = default;
            Option<bool?> isActive = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;
            Option<string?> title = default;
            Option<Dictionary<string, Object>?> metaData = default;
            Option<string?> threadId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "agent_id":
                            agentId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_active":
                            isActive = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "created_at":
                            createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updated_at":
                            updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "meta_data":
                            metaData = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "thread_id":
                            threadId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Conversation.", nameof(id));

            if (!agentId.IsSet)
                throw new ArgumentException("Property is required for class Conversation.", nameof(agentId));

            if (!isActive.IsSet)
                throw new ArgumentException("Property is required for class Conversation.", nameof(isActive));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class Conversation.", nameof(createdAt));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class Conversation.", nameof(updatedAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Conversation.");

            if (agentId.IsSet && agentId.Value == null)
                throw new ArgumentNullException(nameof(agentId), "Property is not nullable for class Conversation.");

            if (isActive.IsSet && isActive.Value == null)
                throw new ArgumentNullException(nameof(isActive), "Property is not nullable for class Conversation.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class Conversation.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class Conversation.");

            if (metaData.IsSet && metaData.Value == null)
                throw new ArgumentNullException(nameof(metaData), "Property is not nullable for class Conversation.");

            return new Conversation(id.Value!, agentId.Value!, isActive.Value!.Value!, createdAt.Value!.Value!, updatedAt.Value!.Value!, title, metaData, threadId);
        }

        /// <summary>
        /// Serializes a <see cref="Conversation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="conversation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Conversation conversation, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, conversation, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Conversation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="conversation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Conversation conversation, JsonSerializerOptions jsonSerializerOptions)
        {
            if (conversation.Id == null)
                throw new ArgumentNullException(nameof(conversation.Id), "Property is required for class Conversation.");

            if (conversation.AgentId == null)
                throw new ArgumentNullException(nameof(conversation.AgentId), "Property is required for class Conversation.");

            if (conversation.MetaDataOption.IsSet && conversation.MetaData == null)
                throw new ArgumentNullException(nameof(conversation.MetaData), "Property is required for class Conversation.");

            writer.WriteString("id", conversation.Id);

            writer.WriteString("agent_id", conversation.AgentId);

            writer.WriteBoolean("is_active", conversation.IsActive);

            writer.WriteString("created_at", conversation.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("updated_at", conversation.UpdatedAt.ToString(UpdatedAtFormat));

            if (conversation.TitleOption.IsSet)
                if (conversation.TitleOption.Value != null)
                    writer.WriteString("title", conversation.Title);
                else
                    writer.WriteNull("title");

            if (conversation.MetaDataOption.IsSet)
            {
                writer.WritePropertyName("meta_data");
                JsonSerializer.Serialize(writer, conversation.MetaData, jsonSerializerOptions);
            }
            if (conversation.ThreadIdOption.IsSet)
                if (conversation.ThreadIdOption.Value != null)
                    writer.WriteString("thread_id", conversation.ThreadId);
                else
                    writer.WriteNull("thread_id");
        }
    }
}
