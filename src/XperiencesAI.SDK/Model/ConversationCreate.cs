// <auto-generated>
/*
 * Xperiences API
 *
 * API for VR mentoring experiences
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@xperiences.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using XperiencesAI.SDK.Client;

namespace XperiencesAI.SDK.Model
{
    /// <summary>
    /// Schema for creating a new conversation.
    /// </summary>
    public partial class ConversationCreate : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConversationCreate" /> class.
        /// </summary>
        /// <param name="title">title</param>
        /// <param name="metaData">Additional meta_data for the conversation</param>
        [JsonConstructor]
        public ConversationCreate(Option<string?> title = default, Option<Dictionary<string, Object>?> metaData = default)
        {
            TitleOption = title;
            MetaDataOption = metaData;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of MetaData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> MetaDataOption { get; private set; }

        /// <summary>
        /// Additional meta_data for the conversation
        /// </summary>
        /// <value>Additional meta_data for the conversation</value>
        [JsonPropertyName("meta_data")]
        public Dictionary<string, Object>? MetaData { get { return this.MetaDataOption; } set { this.MetaDataOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConversationCreate {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  MetaData: ").Append(MetaData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ConversationCreate" />
    /// </summary>
    public class ConversationCreateJsonConverter : JsonConverter<ConversationCreate>
    {
        /// <summary>
        /// Deserializes json to <see cref="ConversationCreate" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ConversationCreate Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> title = default;
            Option<Dictionary<string, Object>?> metaData = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "meta_data":
                            metaData = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (metaData.IsSet && metaData.Value == null)
                throw new ArgumentNullException(nameof(metaData), "Property is not nullable for class ConversationCreate.");

            return new ConversationCreate(title, metaData);
        }

        /// <summary>
        /// Serializes a <see cref="ConversationCreate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="conversationCreate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ConversationCreate conversationCreate, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, conversationCreate, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ConversationCreate" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="conversationCreate"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ConversationCreate conversationCreate, JsonSerializerOptions jsonSerializerOptions)
        {
            if (conversationCreate.MetaDataOption.IsSet && conversationCreate.MetaData == null)
                throw new ArgumentNullException(nameof(conversationCreate.MetaData), "Property is required for class ConversationCreate.");

            if (conversationCreate.TitleOption.IsSet)
                if (conversationCreate.TitleOption.Value != null)
                    writer.WriteString("title", conversationCreate.Title);
                else
                    writer.WriteNull("title");

            if (conversationCreate.MetaDataOption.IsSet)
            {
                writer.WritePropertyName("meta_data");
                JsonSerializer.Serialize(writer, conversationCreate.MetaData, jsonSerializerOptions);
            }
        }
    }
}
