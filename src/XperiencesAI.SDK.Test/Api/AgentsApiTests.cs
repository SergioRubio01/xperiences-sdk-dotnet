/*
 * Xperiences API
 *
 * API for VR mentoring experiences
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@xperiences.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using XperiencesAI.SDK.Api;
using XperiencesAI.SDK.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace XperiencesAI.SDK.Test.Api
{
    /// <summary>
    ///  Class for testing AgentsApi
    /// </summary>
    public sealed class AgentsApiTests : ApiTestsBase
    {
        private readonly IAgentsApi _instance;

        public AgentsApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IAgentsApi>();
        }

        /// <summary>
        /// Test CreateAgentApiV1AgentsPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateAgentApiV1AgentsPostAsyncTest()
        {
            AgentCreate agentCreate = default!;
            var response = await _instance.CreateAgentApiV1AgentsPostAsync(agentCreate);
            var model = response.Created();
            Assert.IsType<AgentResponse>(model);
        }

        /// <summary>
        /// Test CreateConversationApiV1AgentsAgentIdConversationsPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateConversationApiV1AgentsAgentIdConversationsPostAsyncTest()
        {
            string agentId = default!;
            ConversationCreate conversationCreate = default!;
            var response = await _instance.CreateConversationApiV1AgentsAgentIdConversationsPostAsync(agentId, conversationCreate);
            var model = response.Created();
            Assert.IsType<Conversation>(model);
        }

        /// <summary>
        /// Test DeleteAgentApiV1AgentsAgentIdDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteAgentApiV1AgentsAgentIdDeleteAsyncTest()
        {
            string agentId = default!;
            await _instance.DeleteAgentApiV1AgentsAgentIdDeleteAsync(agentId);
        }

        /// <summary>
        /// Test GetAgentApiV1AgentsAgentIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAgentApiV1AgentsAgentIdGetAsyncTest()
        {
            string agentId = default!;
            var response = await _instance.GetAgentApiV1AgentsAgentIdGetAsync(agentId);
            var model = response.Ok();
            Assert.IsType<AgentResponse>(model);
        }

        /// <summary>
        /// Test GetConversationApiV1AgentsAgentIdConversationsConversationIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetConversationApiV1AgentsAgentIdConversationsConversationIdGetAsyncTest()
        {
            string agentId = default!;
            string conversationId = default!;
            var response = await _instance.GetConversationApiV1AgentsAgentIdConversationsConversationIdGetAsync(agentId, conversationId);
            var model = response.Ok();
            Assert.IsType<Conversation>(model);
        }

        /// <summary>
        /// Test ListAgentsApiV1AgentsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListAgentsApiV1AgentsGetAsyncTest()
        {
            Client.Option<int> skip = default!;
            Client.Option<int> limit = default!;
            var response = await _instance.ListAgentsApiV1AgentsGetAsync(skip, limit);
            var model = response.Ok();
            Assert.IsType<List<Agent>>(model);
        }

        /// <summary>
        /// Test ListConversationsApiV1AgentsAgentIdConversationsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListConversationsApiV1AgentsAgentIdConversationsGetAsyncTest()
        {
            string agentId = default!;
            Client.Option<int> skip = default!;
            Client.Option<int> limit = default!;
            var response = await _instance.ListConversationsApiV1AgentsAgentIdConversationsGetAsync(agentId, skip, limit);
            var model = response.Ok();
            Assert.IsType<List<Conversation>>(model);
        }

        /// <summary>
        /// Test ListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGetAsyncTest()
        {
            string agentId = default!;
            string conversationId = default!;
            Client.Option<int> skip = default!;
            Client.Option<int> limit = default!;
            var response = await _instance.ListMessagesApiV1AgentsAgentIdConversationsConversationIdMessagesGetAsync(agentId, conversationId, skip, limit);
            var model = response.Ok();
            Assert.IsType<List<Message>>(model);
        }

        /// <summary>
        /// Test ProcessSpeechApiV1AgentsAgentIdSpeechPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ProcessSpeechApiV1AgentsAgentIdSpeechPostAsyncTest()
        {
            string agentId = default!;
            System.IO.Stream audioFile = default!;
            var response = await _instance.ProcessSpeechApiV1AgentsAgentIdSpeechPostAsync(agentId, audioFile);
            var model = response.Ok();
            Assert.IsType<MessageResponse>(model);
        }

        /// <summary>
        /// Test ProcessTextApiV1AgentsAgentIdTextPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ProcessTextApiV1AgentsAgentIdTextPostAsyncTest()
        {
            string agentId = default!;
            TextRequest textRequest = default!;
            var response = await _instance.ProcessTextApiV1AgentsAgentIdTextPostAsync(agentId, textRequest);
            var model = response.Ok();
            Assert.IsType<TextResponse>(model);
        }

        /// <summary>
        /// Test UpdateAgentApiV1AgentsAgentIdPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateAgentApiV1AgentsAgentIdPutAsyncTest()
        {
            string agentId = default!;
            AgentUpdate agentUpdate = default!;
            var response = await _instance.UpdateAgentApiV1AgentsAgentIdPutAsync(agentId, agentUpdate);
            var model = response.Ok();
            Assert.IsType<Agent>(model);
        }
    }
}
